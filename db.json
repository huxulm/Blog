{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":0,"renderable":0},{"_id":"source/images/06-25/aliyun-logo.png","path":"images/06-25/aliyun-logo.png","modified":0,"renderable":0},{"_id":"source/images/04-25/Screenshot-from-2019-04-25-16-16-05.png","path":"images/04-25/Screenshot-from-2019-04-25-16-16-05.png","modified":0,"renderable":0},{"_id":"source/images/06-10/canary_testing.jpg","path":"images/06-10/canary_testing.jpg","modified":0,"renderable":0},{"_id":"themes/aircloud/source/css/aircloud.less","path":"css/aircloud.less","modified":0,"renderable":1},{"_id":"themes/aircloud/source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":0,"renderable":1},{"_id":"themes/aircloud/source/css/aircloud.css","path":"css/aircloud.css","modified":0,"renderable":1},{"_id":"themes/aircloud/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/aircloud/source/js/index.js","path":"js/index.js","modified":0,"renderable":1},{"_id":"source/images/04-25/Screenshot-from-2019-04-25-13-22-30.png","path":"images/04-25/Screenshot-from-2019-04-25-13-22-30.png","modified":0,"renderable":0},{"_id":"themes/aircloud/source/js/gitment.js","path":"js/gitment.js","modified":0,"renderable":1},{"_id":"source/images/06-25/Affordable-Kubernetes.png","path":"images/06-25/Affordable-Kubernetes.png","modified":0,"renderable":0}],"Cache":[{"_id":"themes/aircloud/_config.yml","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554861272450},{"_id":"themes/aircloud/layout/catagory.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554861272451},{"_id":"themes/aircloud/layout/page.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554861272452},{"_id":"source/_posts/CentOS 7 科学上网.md","hash":"0872e504278a492b1b8d96be74457cde4799c8e5","modified":1558608081819},{"_id":"source/_posts/install-k8s-HA-using-kubespray.md","hash":"c2a2807346a48cf1d1718ac61b211a307113759d","modified":1561456667492},{"_id":"source/_posts/CentOS安装Brother打印机.md","hash":"b620434751966f59cda8cc456bf349967e2e38d6","modified":1556185451741},{"_id":"source/_posts/Docker网络踩坑笔记-1.md","hash":"3b200a56bc37d7be5ce220df4fea3bd729fa4dfd","modified":1558698715352},{"_id":"source/_posts/感悟.md","hash":"3881c40a1ee74ef3a3fa0277398643ed2ee343f3","modified":1554861272450},{"_id":"source/_posts/install-python3-7-on-centos.md","hash":"44ad495a896e2f874dc7fd3b58806824f7ed3320","modified":1561107892689},{"_id":"source/_posts/about-canary.md","hash":"f430a6a3014767d132c2cbc4a2d809d5d309696a","modified":1560162045248},{"_id":"source/_posts/库木塔格沙漠-火焰山一日游.md","hash":"db3dd80bae46ff076db040f6e126f699c76ccdc0","modified":1558604873683},{"_id":"source/about/index.md","hash":"9a1ccedccd8f5606221cfe36e1e027bea72171fa","modified":1554861272450},{"_id":"source/tags/index.md","hash":"22dd3308e0a3db852e008fa8c8d526142e790dcb","modified":1554861272450},{"_id":"source/categories/index.md","hash":"4bd45c8cabe7aa8a4cd419b925d1666e205a0300","modified":1554024295404},{"_id":"themes/aircloud/languages/en.yml","hash":"f3dd50ca369974ac7d335fb1cfabf4ebb04a64fa","modified":1554861272450},{"_id":"source/images/avatar.jpeg","hash":"7fa794cde6717e31f4e3da8c4451acd134ceb84a","modified":1554861272494},{"_id":"themes/aircloud/layout/404.ejs","hash":"8a30233a7b99831bd771121b5f450aaba412e8d5","modified":1554861272451},{"_id":"themes/aircloud/languages/zh.yml","hash":"9ffaff1f5d240c94e44f9ef3b02bbae146af0dd4","modified":1554861272450},{"_id":"themes/aircloud/layout/about.ejs","hash":"cec034166ce08d2f8c961178e07b2f0ceac95cf2","modified":1554861272451},{"_id":"themes/aircloud/layout/archive.ejs","hash":"0f8a062f4f2f0648b23bd8c4a21945a6ca60dc1f","modified":1554861272451},{"_id":"themes/aircloud/layout/index.ejs","hash":"409cca27947a79fd8ec91b07cd396c4559538145","modified":1554861272451},{"_id":"themes/aircloud/layout/layout.ejs","hash":"7efd113aee90e698e187d0ea1f0b42a1c00d210e","modified":1554861272452},{"_id":"themes/aircloud/layout/post.ejs","hash":"2eb5fc0c2bb801528c3db3b09e6cb4d073e3ad99","modified":1554861272452},{"_id":"themes/aircloud/layout/tags.ejs","hash":"1a174d9213d25d9bf6ef28aabdaea6661cdd88c8","modified":1554861272452},{"_id":"themes/aircloud/source/_less/about.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554861272452},{"_id":"themes/aircloud/source/_less/diff.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554861272453},{"_id":"themes/aircloud/source/_less/diff.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554861272453},{"_id":"themes/aircloud/source/_less/page.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554861272454},{"_id":"themes/aircloud/source/_less/page.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554861272454},{"_id":"themes/aircloud/source/_less/theme.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554861272455},{"_id":"themes/aircloud/source/_less/theme.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554861272455},{"_id":"source/images/06-25/aliyun-logo.png","hash":"f0a92c6f9bdadc23dc5b97b7b03504a6b183c7d8","modified":1561431970594},{"_id":"source/images/04-25/Screenshot-from-2019-04-25-16-16-05.png","hash":"9351ba534f0a4f6b9877a8f8943535e4d1fb0a52","modified":1556182974096},{"_id":"source/images/06-10/canary_testing.jpg","hash":"2805d0eba1282731177d4768bb55e3e9b2451e61","modified":1560160603105},{"_id":"themes/aircloud/layout/_partial/donate.ejs","hash":"81c976a3b7fa5c47ef61181d537220eaf1d55eac","modified":1554861272451},{"_id":"themes/aircloud/layout/_partial/footer.ejs","hash":"bcf0e0b6206b7304e9a6a1b58a36e37183755609","modified":1554861272451},{"_id":"themes/aircloud/layout/_partial/head.ejs","hash":"3f18d5d4951a205bab25b08d6bf85b054c84a21b","modified":1554861272451},{"_id":"themes/aircloud/layout/_partial/nav.ejs","hash":"b2a67207b3409802df29ed451e39c5ade872cad0","modified":1554861272451},{"_id":"themes/aircloud/layout/_partial/toc.ejs","hash":"41d11d159011466f0b6272aca9a74df8642b693f","modified":1554861272451},{"_id":"themes/aircloud/source/_less/about.less","hash":"f4bb8cff6e1bc66348decadc6b262477db363f8d","modified":1554861272452},{"_id":"themes/aircloud/source/_less/archive.css","hash":"905efcc06a62d1e8b60df0e12434afa353378d3a","modified":1554861272453},{"_id":"themes/aircloud/source/_less/archive.less","hash":"5538d38614960e69b97a7f80f38b5933851212b8","modified":1554861272453},{"_id":"themes/aircloud/source/_less/common.css","hash":"64914aa6ecd5b948676870e0809e0f220b162e3b","modified":1554861272453},{"_id":"themes/aircloud/source/_less/common.less","hash":"d974286cb5bf3f28e3de9d2a70583318398c3a0b","modified":1554861272453},{"_id":"themes/aircloud/source/_less/donate.css","hash":"ae6a676a42321512f0536c5230bb53084aaf2c2f","modified":1554861272453},{"_id":"themes/aircloud/source/_less/donate.less","hash":"d63139f4aa148bf894afa5c1007a4398696a0e4c","modified":1554861272453},{"_id":"themes/aircloud/source/_less/gitment.css","hash":"7d560b64e367129f98424052c660ae82b03a1d02","modified":1554861272453},{"_id":"themes/aircloud/source/_less/gitment.less","hash":"916deb8ecdee798d7a9b43b544e31dfd5bbd6de4","modified":1554861272453},{"_id":"themes/aircloud/source/_less/hightlight.css","hash":"4e5a9ec3e88fbc2ce0faabceff8d3f5099ea1012","modified":1554861272453},{"_id":"themes/aircloud/source/_less/hightlight.less","hash":"4e5a9ec3e88fbc2ce0faabceff8d3f5099ea1012","modified":1554861272454},{"_id":"themes/aircloud/source/_less/layout.css","hash":"40d7cadf42b130ea1b40de1ae73b2b00e27f476f","modified":1554861272454},{"_id":"themes/aircloud/source/_less/layout.less","hash":"194ac7db2eeee7307fcb7470302f8172100181fb","modified":1554861272454},{"_id":"themes/aircloud/source/_less/index.less","hash":"1e088f36e0f0f9975fce071b7f890427f2c50bdf","modified":1554861272454},{"_id":"themes/aircloud/source/_less/index.css","hash":"cbbde59c9fdd95c1b9ee8ddd9daae4cb1569602c","modified":1554861272454},{"_id":"themes/aircloud/source/_less/post.css","hash":"9a3e91a16c5ff91590f8ec0db5312c90ea41992d","modified":1554861272454},{"_id":"themes/aircloud/source/_less/nav.css","hash":"492249435dc74bb311c8a7b71b5feb86078116a6","modified":1554861272454},{"_id":"themes/aircloud/source/_less/nav.less","hash":"b30e0041866d36435ca8cb31a66d06136e2ee1c8","modified":1554861272454},{"_id":"themes/aircloud/source/_less/tag.css","hash":"3250887aaae0bc62bd82082d000ce3de8cc55ab6","modified":1554861272455},{"_id":"themes/aircloud/source/_less/toc.css","hash":"83b1a219e7fe66d9d6cc34600e5a16311381a883","modified":1554861272455},{"_id":"themes/aircloud/source/_less/variables.css","hash":"9768d38beea904c4febc704192a49c8f7ae6e06c","modified":1554861272456},{"_id":"themes/aircloud/source/_less/tag.less","hash":"47e1ce2f55e2b62beefd0f69dfe7deb594e7b309","modified":1554861272455},{"_id":"themes/aircloud/source/_less/toc.less","hash":"c873ce552b22b0aa2c51a386a91516cadf9160ba","modified":1554861272455},{"_id":"themes/aircloud/source/_less/post.less","hash":"99612eaf52462ce68b854f065e9b78c23fe862af","modified":1561456369868},{"_id":"themes/aircloud/source/_less/variables.less","hash":"49503f7a6c51edd6f1dbdea5345df6bb903b18a5","modified":1554861272456},{"_id":"themes/aircloud/source/css/aircloud.less","hash":"45cab2da310dbfcba37ac3db657db77b4adac60d","modified":1554861272457},{"_id":"themes/aircloud/source/images/avatar.jpeg","hash":"7fa794cde6717e31f4e3da8c4451acd134ceb84a","modified":1554861272494},{"_id":"themes/aircloud/source/css/aircloud.css","hash":"0bf30b22e2a99c8e199e1ccc9e0c3067c6dbe9c1","modified":1561456375584},{"_id":"themes/aircloud/source/css/gitment.css","hash":"926b553be983d6dd90bcb60c5d6d4ee215d268a6","modified":1554861272457},{"_id":"themes/aircloud/source/js/index.js","hash":"1a773830be0ba57636f430918c8b888ff7dbc444","modified":1554861272459},{"_id":"source/images/04-25/Screenshot-from-2019-04-25-13-22-30.png","hash":"11ebec35896006321d6f005c8deec267356f4c95","modified":1556182954231},{"_id":"themes/aircloud/source/_less/_partial/footer.less","hash":"52fc05828f77d9a5a65eb0aca37edc22463d885f","modified":1554861272452},{"_id":"themes/aircloud/source/_less/_partial/footer.css","hash":"e84340aaa76f8eb303ea2fbcc7d1a49ab024f16b","modified":1554861272452},{"_id":"themes/aircloud/source/js/gitment.js","hash":"89687f8fffe1125e08323fd6635ca4e53771c05e","modified":1554861272459},{"_id":"source/images/06-25/Affordable-Kubernetes.png","hash":"423b99feb79343f99d7ab06c8ddb3ed771a6677d","modified":1561455879012}],"Category":[],"Data":[],"Page":[{"layout":"about","title":"About","date":"2016-04-20T20:48:33.000Z","comments":1,"_content":"在成为一名真正的程序员的路上。\n","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2016-04-21 04:48:33\ncomments: true\n---\n在成为一名真正的程序员的路上。\n","updated":"2019-04-10T01:54:32.450Z","path":"about/index.html","_id":"cjxbmj0rz0001ekmhfd15y214","content":"<p>在成为一名真正的程序员的路上。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在成为一名真正的程序员的路上。</p>\n"},{"layout":"tags","title":"Tags","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\n---","date":"2019-04-10T01:54:32.450Z","updated":"2019-04-10T01:54:32.450Z","path":"tags/index.html","comments":1,"_id":"cjxbmj0s00003ekmhgnmhqu70","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"CATEGORIES","date":"2019-03-24T18:13:33.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: CATEGORIES\ndate: 2019-03-25 02:13:33\ntype: \"categories\"\ncomments: false\n---\n","updated":"2019-03-31T09:24:55.404Z","path":"categories/index.html","layout":"page","_id":"cjxbmj0s30006ekmhyr0v66p6","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"layout":"post","title":"CentOS 7 科学上网","date":"2019-05-16T02:11:00.000Z","_content":"\n### 搭建 Shadowsocks 代理服务器\n\n关于代理服务器详细可见:[Proxy Server](https://en.wikipedia.org/wiki/Proxy_server)\n\n整理下日常使用过代理的各种方式\n\n### 使用 Shadowsocks 实现代理服务器\n\n[shadowsocks]([https://github.com/shadowsocks]),各种语言的版本都有.这里以[shadowsocks-libev](/)为例.\n\n1. 从源构建：\n   下载当前最新发行版:[shadowsocks-libev-3.2.5.tar.gz](https://github.com/shadowsocks/shadowsocks-libev/releases/download/v3.2.5/shadowsocks-libev-3.2.5.tar.gz)\n\n```bash\ntar -xvf shadowsocks-libev-3.2.5.tar.gz\n\n# 安装构建依赖\nyum install epel-release -y\nyum install gcc gettext autoconf libtool \\\nautomake make pcre-devel asciidoc xmlto \\\nc-ares-devel libev-devel libsodium-devel mbedtls-devel -y\n\n# 安装\ncd shadowsocks-libev-3.2.5\n./configure  # 可以 --help 查看更多选项\nmake\nmake install\n```\n\n2. 运行\n\n```bash\nls /usr/local/bin/ | grep ss-\n```\n\n3. 可以看到:\n\n```bash\nss-local\nss-manager\nss-nat\nss-redir\nss-server\nss-tunnel\n```\n\n4. 创建 ss 服务器配置:\n\n```bash\nmkdir -p /etc/shadowsocks-libev\ntouch /etc/shadowsocks-libev/ss-server.json\ncat <<EOF >> /etc/shadowsocks-libev/ss-server.json\n{\n    \"server\": \"0.0.0.0\",\n    \"port_password\": { # 一端口一密码\n        \"12306\": \"foobar1\",\n        \"12307\": \"foobar2\",\n    },\n    \"timeout\": 300,\n    \"method\": \"aes-256-cfb\"\n}\nEOF\n```\n\n5. 启动服务\n\n```bash\nnohup ss-server -c /etc/shadowsocks-libev/ss-server.json &>/dev/null &\n```\n也可以使用[systemd](https://www.freedesktop.org/wiki/Software/systemd/)，实现开机启动(貌似不大需要).\n\n\n### 客户端使用\n安装过程同上。\n1. 创建客户端配置文件:\n\n```bash\n# ss-client.json\n{\n    \"server\": \"my_server_ip\",\n    \"server_port\": 12306,\n    \"local_address\": \"127.0.0.1\",\n    \"local_port\": 1080,\n    \"password\": \"foobar1\",\n    \"timeout\": 300,\n    \"method\": \"aes-256-cfb\",\n    \"fast_open\": false\n}\n```\n\n2. 客户端启动:\n\n```bash\nnohup ss-local -c ss-client.json &>/dev/null &\n```\n\n### 使用 privoxy 实现 HTTP 代理\n\n安装编译工具\n\n```bash\nyum groupinstall \"Development Tools\"\n```\n\n下载 privoxy 最新版\n[http://sourceforge.net/projects/ijbswa/files/Sources/](http://sourceforge.net/projects/ijbswa/files/Sources/)\n\n编译\n\n```bash\ntar xzvf privoxy-3.0.23-stable-src.tar.gz\ncd privoxy-3.0.23-stable\nautoheader\nautoconf\n./configure      # (--help to see options)\nmake             # (the make from GNU, sometimes called gmake)\n```\n\nprivoxy 文档建议使用非 root 用户运行,建立账户\n\n```bash\nsudo useradd privoxy -r -s /usr/sbin/nologin\n```\n\n安装\n\n```bash\nsudo make install\n```\n\n更改侦听地址\n\n```bash\nvi /usr/local/etc/privoxy/config\n```\n\n将 listen-address 值更改为 0.0.0.0:8118\n\n重启\n\n```bash\nsystemctl restart privoxy\n```\n\n打开防火墙端口\n\n```bash\nfirewall-cmd --permanent --add-port=8118/tcp\nfirewall-cmd --reload\n```\n\n范例配置(使用本地 socks5 上级代理，本地地址不走代理)\n\n```bash\nvi /usr/local/etc/privoxy/config\n```\n\n增加\n\n```bash\nforward-socks5 / 127.0.0.1:1080 .\nforward 10.*.*.*/ .\nforward 192.168.*.*/ .\nforward 127.*.*.*/ .\nforward localhost/ .\n```\nsystemctl重启 privoxy\n","source":"_posts/CentOS 7 科学上网.md","raw":"---\nlayout: post\ntitle: CentOS 7 科学上网\ndate: 2019-05-16 10:11:00\ntags: \n  - CentOS\n  - 代理\n---\n\n### 搭建 Shadowsocks 代理服务器\n\n关于代理服务器详细可见:[Proxy Server](https://en.wikipedia.org/wiki/Proxy_server)\n\n整理下日常使用过代理的各种方式\n\n### 使用 Shadowsocks 实现代理服务器\n\n[shadowsocks]([https://github.com/shadowsocks]),各种语言的版本都有.这里以[shadowsocks-libev](/)为例.\n\n1. 从源构建：\n   下载当前最新发行版:[shadowsocks-libev-3.2.5.tar.gz](https://github.com/shadowsocks/shadowsocks-libev/releases/download/v3.2.5/shadowsocks-libev-3.2.5.tar.gz)\n\n```bash\ntar -xvf shadowsocks-libev-3.2.5.tar.gz\n\n# 安装构建依赖\nyum install epel-release -y\nyum install gcc gettext autoconf libtool \\\nautomake make pcre-devel asciidoc xmlto \\\nc-ares-devel libev-devel libsodium-devel mbedtls-devel -y\n\n# 安装\ncd shadowsocks-libev-3.2.5\n./configure  # 可以 --help 查看更多选项\nmake\nmake install\n```\n\n2. 运行\n\n```bash\nls /usr/local/bin/ | grep ss-\n```\n\n3. 可以看到:\n\n```bash\nss-local\nss-manager\nss-nat\nss-redir\nss-server\nss-tunnel\n```\n\n4. 创建 ss 服务器配置:\n\n```bash\nmkdir -p /etc/shadowsocks-libev\ntouch /etc/shadowsocks-libev/ss-server.json\ncat <<EOF >> /etc/shadowsocks-libev/ss-server.json\n{\n    \"server\": \"0.0.0.0\",\n    \"port_password\": { # 一端口一密码\n        \"12306\": \"foobar1\",\n        \"12307\": \"foobar2\",\n    },\n    \"timeout\": 300,\n    \"method\": \"aes-256-cfb\"\n}\nEOF\n```\n\n5. 启动服务\n\n```bash\nnohup ss-server -c /etc/shadowsocks-libev/ss-server.json &>/dev/null &\n```\n也可以使用[systemd](https://www.freedesktop.org/wiki/Software/systemd/)，实现开机启动(貌似不大需要).\n\n\n### 客户端使用\n安装过程同上。\n1. 创建客户端配置文件:\n\n```bash\n# ss-client.json\n{\n    \"server\": \"my_server_ip\",\n    \"server_port\": 12306,\n    \"local_address\": \"127.0.0.1\",\n    \"local_port\": 1080,\n    \"password\": \"foobar1\",\n    \"timeout\": 300,\n    \"method\": \"aes-256-cfb\",\n    \"fast_open\": false\n}\n```\n\n2. 客户端启动:\n\n```bash\nnohup ss-local -c ss-client.json &>/dev/null &\n```\n\n### 使用 privoxy 实现 HTTP 代理\n\n安装编译工具\n\n```bash\nyum groupinstall \"Development Tools\"\n```\n\n下载 privoxy 最新版\n[http://sourceforge.net/projects/ijbswa/files/Sources/](http://sourceforge.net/projects/ijbswa/files/Sources/)\n\n编译\n\n```bash\ntar xzvf privoxy-3.0.23-stable-src.tar.gz\ncd privoxy-3.0.23-stable\nautoheader\nautoconf\n./configure      # (--help to see options)\nmake             # (the make from GNU, sometimes called gmake)\n```\n\nprivoxy 文档建议使用非 root 用户运行,建立账户\n\n```bash\nsudo useradd privoxy -r -s /usr/sbin/nologin\n```\n\n安装\n\n```bash\nsudo make install\n```\n\n更改侦听地址\n\n```bash\nvi /usr/local/etc/privoxy/config\n```\n\n将 listen-address 值更改为 0.0.0.0:8118\n\n重启\n\n```bash\nsystemctl restart privoxy\n```\n\n打开防火墙端口\n\n```bash\nfirewall-cmd --permanent --add-port=8118/tcp\nfirewall-cmd --reload\n```\n\n范例配置(使用本地 socks5 上级代理，本地地址不走代理)\n\n```bash\nvi /usr/local/etc/privoxy/config\n```\n\n增加\n\n```bash\nforward-socks5 / 127.0.0.1:1080 .\nforward 10.*.*.*/ .\nforward 192.168.*.*/ .\nforward 127.*.*.*/ .\nforward localhost/ .\n```\nsystemctl重启 privoxy\n","slug":"CentOS 7 科学上网","published":1,"updated":"2019-05-23T10:41:21.819Z","comments":1,"photos":[],"link":"","_id":"cjxbmj0rv0000ekmhkx4zkpjx","content":"<h3 id=\"搭建-Shadowsocks-代理服务器\"><a href=\"#搭建-Shadowsocks-代理服务器\" class=\"headerlink\" title=\"搭建 Shadowsocks 代理服务器\"></a>搭建 Shadowsocks 代理服务器</h3><p>关于代理服务器详细可见:<a href=\"https://en.wikipedia.org/wiki/Proxy_server\" target=\"_blank\" rel=\"noopener\">Proxy Server</a></p>\n<p>整理下日常使用过代理的各种方式</p>\n<h3 id=\"使用-Shadowsocks-实现代理服务器\"><a href=\"#使用-Shadowsocks-实现代理服务器\" class=\"headerlink\" title=\"使用 Shadowsocks 实现代理服务器\"></a>使用 Shadowsocks 实现代理服务器</h3><p><a href=\"[https://github.com/shadowsocks]\">shadowsocks</a>,各种语言的版本都有.这里以<a href=\"/\">shadowsocks-libev</a>为例.</p>\n<ol>\n<li>从源构建：<br>下载当前最新发行版:<a href=\"https://github.com/shadowsocks/shadowsocks-libev/releases/download/v3.2.5/shadowsocks-libev-3.2.5.tar.gz\" target=\"_blank\" rel=\"noopener\">shadowsocks-libev-3.2.5.tar.gz</a></li>\n</ol>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">tar</span> -xvf shadowsocks-libev-3.2.5.tar.gz\n\n<span class=\"token comment\" spellcheck=\"true\"># 安装构建依赖</span>\nyum <span class=\"token function\">install</span> epel-release -y\nyum <span class=\"token function\">install</span> gcc gettext autoconf libtool \\\nautomake <span class=\"token function\">make</span> pcre-devel asciidoc xmlto \\\nc-ares-devel libev-devel libsodium-devel mbedtls-devel -y\n\n<span class=\"token comment\" spellcheck=\"true\"># 安装</span>\n<span class=\"token function\">cd</span> shadowsocks-libev-3.2.5\n./configure  <span class=\"token comment\" spellcheck=\"true\"># 可以 --help 查看更多选项</span>\n<span class=\"token function\">make</span>\n<span class=\"token function\">make</span> <span class=\"token function\">install</span>\n</code></pre>\n<ol start=\"2\">\n<li>运行</li>\n</ol>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> /usr/local/bin/ <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> ss-\n</code></pre>\n<ol start=\"3\">\n<li>可以看到:</li>\n</ol>\n<pre class=\" language-bash\"><code class=\"language-bash\">ss-local\nss-manager\nss-nat\nss-redir\nss-server\nss-tunnel\n</code></pre>\n<ol start=\"4\">\n<li>创建 ss 服务器配置:</li>\n</ol>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> -p /etc/shadowsocks-libev\n<span class=\"token function\">touch</span> /etc/shadowsocks-libev/ss-server.json\n<span class=\"token function\">cat</span> <span class=\"token operator\">&lt;&lt;</span>EOF <span class=\"token operator\">>></span> /etc/shadowsocks-libev/ss-server.json\n<span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"server\"</span><span class=\"token keyword\">:</span> <span class=\"token string\">\"0.0.0.0\"</span>,\n    <span class=\"token string\">\"port_password\"</span><span class=\"token keyword\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\"># 一端口一密码</span>\n        <span class=\"token string\">\"12306\"</span><span class=\"token keyword\">:</span> <span class=\"token string\">\"foobar1\"</span>,\n        <span class=\"token string\">\"12307\"</span><span class=\"token keyword\">:</span> <span class=\"token string\">\"foobar2\"</span>,\n    <span class=\"token punctuation\">}</span>,\n    <span class=\"token string\">\"timeout\"</span><span class=\"token keyword\">:</span> 300,\n    <span class=\"token string\">\"method\"</span><span class=\"token keyword\">:</span> <span class=\"token string\">\"aes-256-cfb\"</span>\n<span class=\"token punctuation\">}</span>\nEOF\n</code></pre>\n<ol start=\"5\">\n<li>启动服务</li>\n</ol>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">nohup</span> ss-server -c /etc/shadowsocks-libev/ss-server.json <span class=\"token operator\">&amp;</span><span class=\"token operator\">></span>/dev/null <span class=\"token operator\">&amp;</span>\n</code></pre>\n<p>也可以使用<a href=\"https://www.freedesktop.org/wiki/Software/systemd/\" target=\"_blank\" rel=\"noopener\">systemd</a>，实现开机启动(貌似不大需要).</p>\n<h3 id=\"客户端使用\"><a href=\"#客户端使用\" class=\"headerlink\" title=\"客户端使用\"></a>客户端使用</h3><p>安装过程同上。</p>\n<ol>\n<li>创建客户端配置文件:</li>\n</ol>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># ss-client.json</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"server\"</span><span class=\"token keyword\">:</span> <span class=\"token string\">\"my_server_ip\"</span>,\n    <span class=\"token string\">\"server_port\"</span><span class=\"token keyword\">:</span> 12306,\n    <span class=\"token string\">\"local_address\"</span><span class=\"token keyword\">:</span> <span class=\"token string\">\"127.0.0.1\"</span>,\n    <span class=\"token string\">\"local_port\"</span><span class=\"token keyword\">:</span> 1080,\n    <span class=\"token string\">\"password\"</span><span class=\"token keyword\">:</span> <span class=\"token string\">\"foobar1\"</span>,\n    <span class=\"token string\">\"timeout\"</span><span class=\"token keyword\">:</span> 300,\n    <span class=\"token string\">\"method\"</span><span class=\"token keyword\">:</span> <span class=\"token string\">\"aes-256-cfb\"</span>,\n    <span class=\"token string\">\"fast_open\"</span><span class=\"token keyword\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ol start=\"2\">\n<li>客户端启动:</li>\n</ol>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">nohup</span> ss-local -c ss-client.json <span class=\"token operator\">&amp;</span><span class=\"token operator\">></span>/dev/null <span class=\"token operator\">&amp;</span>\n</code></pre>\n<h3 id=\"使用-privoxy-实现-HTTP-代理\"><a href=\"#使用-privoxy-实现-HTTP-代理\" class=\"headerlink\" title=\"使用 privoxy 实现 HTTP 代理\"></a>使用 privoxy 实现 HTTP 代理</h3><p>安装编译工具</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">yum groupinstall <span class=\"token string\">\"Development Tools\"</span>\n</code></pre>\n<p>下载 privoxy 最新版<br><a href=\"http://sourceforge.net/projects/ijbswa/files/Sources/\" target=\"_blank\" rel=\"noopener\">http://sourceforge.net/projects/ijbswa/files/Sources/</a></p>\n<p>编译</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">tar</span> xzvf privoxy-3.0.23-stable-src.tar.gz\n<span class=\"token function\">cd</span> privoxy-3.0.23-stable\nautoheader\nautoconf\n./configure      <span class=\"token comment\" spellcheck=\"true\"># (--help to see options)</span>\n<span class=\"token function\">make</span>             <span class=\"token comment\" spellcheck=\"true\"># (the make from GNU, sometimes called gmake)</span>\n</code></pre>\n<p>privoxy 文档建议使用非 root 用户运行,建立账户</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">useradd</span> privoxy -r -s /usr/sbin/nologin\n</code></pre>\n<p>安装</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span>\n</code></pre>\n<p>更改侦听地址</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">vi</span> /usr/local/etc/privoxy/config\n</code></pre>\n<p>将 listen-address 值更改为 0.0.0.0:8118</p>\n<p>重启</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">systemctl restart privoxy\n</code></pre>\n<p>打开防火墙端口</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">firewall-cmd --permanent --add-port<span class=\"token operator\">=</span>8118/tcp\nfirewall-cmd --reload\n</code></pre>\n<p>范例配置(使用本地 socks5 上级代理，本地地址不走代理)</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">vi</span> /usr/local/etc/privoxy/config\n</code></pre>\n<p>增加</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">forward-socks5 / 127.0.0.1:1080 <span class=\"token keyword\">.</span>\nforward 10.*.*.*/ <span class=\"token keyword\">.</span>\nforward 192.168.*.*/ <span class=\"token keyword\">.</span>\nforward 127.*.*.*/ <span class=\"token keyword\">.</span>\nforward localhost/ <span class=\"token keyword\">.</span>\n</code></pre>\n<p>systemctl重启 privoxy</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"搭建-Shadowsocks-代理服务器\"><a href=\"#搭建-Shadowsocks-代理服务器\" class=\"headerlink\" title=\"搭建 Shadowsocks 代理服务器\"></a>搭建 Shadowsocks 代理服务器</h3><p>关于代理服务器详细可见:<a href=\"https://en.wikipedia.org/wiki/Proxy_server\" target=\"_blank\" rel=\"noopener\">Proxy Server</a></p>\n<p>整理下日常使用过代理的各种方式</p>\n<h3 id=\"使用-Shadowsocks-实现代理服务器\"><a href=\"#使用-Shadowsocks-实现代理服务器\" class=\"headerlink\" title=\"使用 Shadowsocks 实现代理服务器\"></a>使用 Shadowsocks 实现代理服务器</h3><p><a href=\"[https://github.com/shadowsocks]\">shadowsocks</a>,各种语言的版本都有.这里以<a href=\"/\">shadowsocks-libev</a>为例.</p>\n<ol>\n<li>从源构建：<br>下载当前最新发行版:<a href=\"https://github.com/shadowsocks/shadowsocks-libev/releases/download/v3.2.5/shadowsocks-libev-3.2.5.tar.gz\" target=\"_blank\" rel=\"noopener\">shadowsocks-libev-3.2.5.tar.gz</a></li>\n</ol>\n<pre><code class=\"bash\">tar -xvf shadowsocks-libev-3.2.5.tar.gz\n\n# 安装构建依赖\nyum install epel-release -y\nyum install gcc gettext autoconf libtool \\\nautomake make pcre-devel asciidoc xmlto \\\nc-ares-devel libev-devel libsodium-devel mbedtls-devel -y\n\n# 安装\ncd shadowsocks-libev-3.2.5\n./configure  # 可以 --help 查看更多选项\nmake\nmake install\n</code></pre>\n<ol start=\"2\">\n<li>运行</li>\n</ol>\n<pre><code class=\"bash\">ls /usr/local/bin/ | grep ss-\n</code></pre>\n<ol start=\"3\">\n<li>可以看到:</li>\n</ol>\n<pre><code class=\"bash\">ss-local\nss-manager\nss-nat\nss-redir\nss-server\nss-tunnel\n</code></pre>\n<ol start=\"4\">\n<li>创建 ss 服务器配置:</li>\n</ol>\n<pre><code class=\"bash\">mkdir -p /etc/shadowsocks-libev\ntouch /etc/shadowsocks-libev/ss-server.json\ncat &lt;&lt;EOF &gt;&gt; /etc/shadowsocks-libev/ss-server.json\n{\n    &quot;server&quot;: &quot;0.0.0.0&quot;,\n    &quot;port_password&quot;: { # 一端口一密码\n        &quot;12306&quot;: &quot;foobar1&quot;,\n        &quot;12307&quot;: &quot;foobar2&quot;,\n    },\n    &quot;timeout&quot;: 300,\n    &quot;method&quot;: &quot;aes-256-cfb&quot;\n}\nEOF\n</code></pre>\n<ol start=\"5\">\n<li>启动服务</li>\n</ol>\n<pre><code class=\"bash\">nohup ss-server -c /etc/shadowsocks-libev/ss-server.json &amp;&gt;/dev/null &amp;\n</code></pre>\n<p>也可以使用<a href=\"https://www.freedesktop.org/wiki/Software/systemd/\" target=\"_blank\" rel=\"noopener\">systemd</a>，实现开机启动(貌似不大需要).</p>\n<h3 id=\"客户端使用\"><a href=\"#客户端使用\" class=\"headerlink\" title=\"客户端使用\"></a>客户端使用</h3><p>安装过程同上。</p>\n<ol>\n<li>创建客户端配置文件:</li>\n</ol>\n<pre><code class=\"bash\"># ss-client.json\n{\n    &quot;server&quot;: &quot;my_server_ip&quot;,\n    &quot;server_port&quot;: 12306,\n    &quot;local_address&quot;: &quot;127.0.0.1&quot;,\n    &quot;local_port&quot;: 1080,\n    &quot;password&quot;: &quot;foobar1&quot;,\n    &quot;timeout&quot;: 300,\n    &quot;method&quot;: &quot;aes-256-cfb&quot;,\n    &quot;fast_open&quot;: false\n}\n</code></pre>\n<ol start=\"2\">\n<li>客户端启动:</li>\n</ol>\n<pre><code class=\"bash\">nohup ss-local -c ss-client.json &amp;&gt;/dev/null &amp;\n</code></pre>\n<h3 id=\"使用-privoxy-实现-HTTP-代理\"><a href=\"#使用-privoxy-实现-HTTP-代理\" class=\"headerlink\" title=\"使用 privoxy 实现 HTTP 代理\"></a>使用 privoxy 实现 HTTP 代理</h3><p>安装编译工具</p>\n<pre><code class=\"bash\">yum groupinstall &quot;Development Tools&quot;\n</code></pre>\n<p>下载 privoxy 最新版<br><a href=\"http://sourceforge.net/projects/ijbswa/files/Sources/\" target=\"_blank\" rel=\"noopener\">http://sourceforge.net/projects/ijbswa/files/Sources/</a></p>\n<p>编译</p>\n<pre><code class=\"bash\">tar xzvf privoxy-3.0.23-stable-src.tar.gz\ncd privoxy-3.0.23-stable\nautoheader\nautoconf\n./configure      # (--help to see options)\nmake             # (the make from GNU, sometimes called gmake)\n</code></pre>\n<p>privoxy 文档建议使用非 root 用户运行,建立账户</p>\n<pre><code class=\"bash\">sudo useradd privoxy -r -s /usr/sbin/nologin\n</code></pre>\n<p>安装</p>\n<pre><code class=\"bash\">sudo make install\n</code></pre>\n<p>更改侦听地址</p>\n<pre><code class=\"bash\">vi /usr/local/etc/privoxy/config\n</code></pre>\n<p>将 listen-address 值更改为 0.0.0.0:8118</p>\n<p>重启</p>\n<pre><code class=\"bash\">systemctl restart privoxy\n</code></pre>\n<p>打开防火墙端口</p>\n<pre><code class=\"bash\">firewall-cmd --permanent --add-port=8118/tcp\nfirewall-cmd --reload\n</code></pre>\n<p>范例配置(使用本地 socks5 上级代理，本地地址不走代理)</p>\n<pre><code class=\"bash\">vi /usr/local/etc/privoxy/config\n</code></pre>\n<p>增加</p>\n<pre><code class=\"bash\">forward-socks5 / 127.0.0.1:1080 .\nforward 10.*.*.*/ .\nforward 192.168.*.*/ .\nforward 127.*.*.*/ .\nforward localhost/ .\n</code></pre>\n<p>systemctl重启 privoxy</p>\n"},{"layout":"post","title":"CentOS 安装 Brother 打印机","date":"2019-04-25T05:15:54.000Z","_content":"\n### 进入下载页面\n[https://support.brother.com/g/b/countrytop.aspx?c=cn&lang=zh](https://support.brother.com/g/b/countrytop.aspx?c=cn&lang=zh)\n\n![Download Page](/images/04-25/Screenshot-from-2019-04-25-13-22-30.png)\n\n### 下载驱动安装工具(Driver Install Tool)\n \n```bash\ncd ~/Downloads && \\\nwget https://download.brother.com/welcome/dlf006893/linux-brprinter-installer-2.2.1-1.gz\n```\n驱动安装工具说明:\n \n|名称|功能|\n|-|-|\n|Driver Install Tool|该工具会安装LPR, CUPSwrapper驱动以及扫描器(scanner)驱动 (用于扫描模型).|\n \n### 解压\n```bash\ngunzip -c ~/Downloads/linux-brprinter-installer*.gz > /tmp/linux-brprinter-installer\n```\n \n### 添加可执行权限\n```bash\nsu -c \"chmod +x linux-brprinter-installer\"\n```\n \n### 安装打印机驱动(这里安装的是MFC-8450DN)\n```bash\nsudo ./linux-brprinter-installer\n```\n![安装](/images/04-25/Screenshot-from-2019-04-25-16-16-05.png)\n\n### 提示`Will you specify the Device URI? [Y/n]时:\n- USB连接选择`n`\n- 网络共享连接浏览器打开: [http://localhost:631/printers/](http://localhost:631/printers/)\n  - 选择`Printer`\n  - 选择`Modify Printer`\n  - 输入sudo用户名密码\n  - 选择`Protocal`继续\n\n最后,前往`System Tools` > `Settings` > `Devices` > `Printers` 解锁后点击添加打印机.\n","source":"_posts/CentOS安装Brother打印机.md","raw":"---\nlayout: post\ntitle: CentOS 安装 Brother 打印机\ndate: 2019-04-25 13:15:54\ntags: CentOS\n---\n\n### 进入下载页面\n[https://support.brother.com/g/b/countrytop.aspx?c=cn&lang=zh](https://support.brother.com/g/b/countrytop.aspx?c=cn&lang=zh)\n\n![Download Page](/images/04-25/Screenshot-from-2019-04-25-13-22-30.png)\n\n### 下载驱动安装工具(Driver Install Tool)\n \n```bash\ncd ~/Downloads && \\\nwget https://download.brother.com/welcome/dlf006893/linux-brprinter-installer-2.2.1-1.gz\n```\n驱动安装工具说明:\n \n|名称|功能|\n|-|-|\n|Driver Install Tool|该工具会安装LPR, CUPSwrapper驱动以及扫描器(scanner)驱动 (用于扫描模型).|\n \n### 解压\n```bash\ngunzip -c ~/Downloads/linux-brprinter-installer*.gz > /tmp/linux-brprinter-installer\n```\n \n### 添加可执行权限\n```bash\nsu -c \"chmod +x linux-brprinter-installer\"\n```\n \n### 安装打印机驱动(这里安装的是MFC-8450DN)\n```bash\nsudo ./linux-brprinter-installer\n```\n![安装](/images/04-25/Screenshot-from-2019-04-25-16-16-05.png)\n\n### 提示`Will you specify the Device URI? [Y/n]时:\n- USB连接选择`n`\n- 网络共享连接浏览器打开: [http://localhost:631/printers/](http://localhost:631/printers/)\n  - 选择`Printer`\n  - 选择`Modify Printer`\n  - 输入sudo用户名密码\n  - 选择`Protocal`继续\n\n最后,前往`System Tools` > `Settings` > `Devices` > `Printers` 解锁后点击添加打印机.\n","slug":"CentOS安装Brother打印机","published":1,"updated":"2019-04-25T09:44:11.741Z","comments":1,"photos":[],"link":"","_id":"cjxbmj0rz0002ekmh9fsftld4","content":"<h3 id=\"进入下载页面\"><a href=\"#进入下载页面\" class=\"headerlink\" title=\"进入下载页面\"></a>进入下载页面</h3><p><a href=\"https://support.brother.com/g/b/countrytop.aspx?c=cn&amp;lang=zh\" target=\"_blank\" rel=\"noopener\">https://support.brother.com/g/b/countrytop.aspx?c=cn&amp;lang=zh</a></p>\n<p><img src=\"/images/04-25/Screenshot-from-2019-04-25-13-22-30.png\" alt=\"Download Page\"></p>\n<h3 id=\"下载驱动安装工具-Driver-Install-Tool\"><a href=\"#下载驱动安装工具-Driver-Install-Tool\" class=\"headerlink\" title=\"下载驱动安装工具(Driver Install Tool)\"></a>下载驱动安装工具(Driver Install Tool)</h3><pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">cd</span> ~/Downloads <span class=\"token operator\">&amp;&amp;</span> \\\n<span class=\"token function\">wget</span> https://download.brother.com/welcome/dlf006893/linux-brprinter-installer-2.2.1-1.gz\n</code></pre>\n<p>驱动安装工具说明:</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Driver Install Tool</td>\n<td>该工具会安装LPR, CUPSwrapper驱动以及扫描器(scanner)驱动 (用于扫描模型).</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h3><pre class=\" language-bash\"><code class=\"language-bash\">gunzip -c ~/Downloads/linux-brprinter-installer*.gz <span class=\"token operator\">></span> /tmp/linux-brprinter-installer\n</code></pre>\n<h3 id=\"添加可执行权限\"><a href=\"#添加可执行权限\" class=\"headerlink\" title=\"添加可执行权限\"></a>添加可执行权限</h3><pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">su</span> -c <span class=\"token string\">\"chmod +x linux-brprinter-installer\"</span>\n</code></pre>\n<h3 id=\"安装打印机驱动-这里安装的是MFC-8450DN\"><a href=\"#安装打印机驱动-这里安装的是MFC-8450DN\" class=\"headerlink\" title=\"安装打印机驱动(这里安装的是MFC-8450DN)\"></a>安装打印机驱动(这里安装的是MFC-8450DN)</h3><pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ./linux-brprinter-installer\n</code></pre>\n<p><img src=\"/images/04-25/Screenshot-from-2019-04-25-16-16-05.png\" alt=\"安装\"></p>\n<h3 id=\"提示-Will-you-specify-the-Device-URI-Y-n-时\"><a href=\"#提示-Will-you-specify-the-Device-URI-Y-n-时\" class=\"headerlink\" title=\"提示`Will you specify the Device URI? [Y/n]时:\"></a>提示`Will you specify the Device URI? [Y/n]时:</h3><ul>\n<li>USB连接选择<code>n</code></li>\n<li>网络共享连接浏览器打开: <a href=\"http://localhost:631/printers/\" target=\"_blank\" rel=\"noopener\">http://localhost:631/printers/</a><ul>\n<li>选择<code>Printer</code></li>\n<li>选择<code>Modify Printer</code></li>\n<li>输入sudo用户名密码</li>\n<li>选择<code>Protocal</code>继续</li>\n</ul>\n</li>\n</ul>\n<p>最后,前往<code>System Tools</code> &gt; <code>Settings</code> &gt; <code>Devices</code> &gt; <code>Printers</code> 解锁后点击添加打印机.</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"进入下载页面\"><a href=\"#进入下载页面\" class=\"headerlink\" title=\"进入下载页面\"></a>进入下载页面</h3><p><a href=\"https://support.brother.com/g/b/countrytop.aspx?c=cn&amp;lang=zh\" target=\"_blank\" rel=\"noopener\">https://support.brother.com/g/b/countrytop.aspx?c=cn&amp;lang=zh</a></p>\n<p><img src=\"/images/04-25/Screenshot-from-2019-04-25-13-22-30.png\" alt=\"Download Page\"></p>\n<h3 id=\"下载驱动安装工具-Driver-Install-Tool\"><a href=\"#下载驱动安装工具-Driver-Install-Tool\" class=\"headerlink\" title=\"下载驱动安装工具(Driver Install Tool)\"></a>下载驱动安装工具(Driver Install Tool)</h3><pre><code class=\"bash\">cd ~/Downloads &amp;&amp; \\\nwget https://download.brother.com/welcome/dlf006893/linux-brprinter-installer-2.2.1-1.gz\n</code></pre>\n<p>驱动安装工具说明:</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Driver Install Tool</td>\n<td>该工具会安装LPR, CUPSwrapper驱动以及扫描器(scanner)驱动 (用于扫描模型).</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h3><pre><code class=\"bash\">gunzip -c ~/Downloads/linux-brprinter-installer*.gz &gt; /tmp/linux-brprinter-installer\n</code></pre>\n<h3 id=\"添加可执行权限\"><a href=\"#添加可执行权限\" class=\"headerlink\" title=\"添加可执行权限\"></a>添加可执行权限</h3><pre><code class=\"bash\">su -c &quot;chmod +x linux-brprinter-installer&quot;\n</code></pre>\n<h3 id=\"安装打印机驱动-这里安装的是MFC-8450DN\"><a href=\"#安装打印机驱动-这里安装的是MFC-8450DN\" class=\"headerlink\" title=\"安装打印机驱动(这里安装的是MFC-8450DN)\"></a>安装打印机驱动(这里安装的是MFC-8450DN)</h3><pre><code class=\"bash\">sudo ./linux-brprinter-installer\n</code></pre>\n<p><img src=\"/images/04-25/Screenshot-from-2019-04-25-16-16-05.png\" alt=\"安装\"></p>\n<h3 id=\"提示-Will-you-specify-the-Device-URI-Y-n-时\"><a href=\"#提示-Will-you-specify-the-Device-URI-Y-n-时\" class=\"headerlink\" title=\"提示`Will you specify the Device URI? [Y/n]时:\"></a>提示`Will you specify the Device URI? [Y/n]时:</h3><ul>\n<li>USB连接选择<code>n</code></li>\n<li>网络共享连接浏览器打开: <a href=\"http://localhost:631/printers/\" target=\"_blank\" rel=\"noopener\">http://localhost:631/printers/</a><ul>\n<li>选择<code>Printer</code></li>\n<li>选择<code>Modify Printer</code></li>\n<li>输入sudo用户名密码</li>\n<li>选择<code>Protocal</code>继续</li>\n</ul>\n</li>\n</ul>\n<p>最后,前往<code>System Tools</code> &gt; <code>Settings</code> &gt; <code>Devices</code> &gt; <code>Printers</code> 解锁后点击添加打印机.</p>\n"},{"title":"一点感悟","date":"2019-04-05T17:16:25.000Z","_content":"关于Blog，是一个相对“持久”的话题。\n \n一直想说点什么，很多时候也不知道从哪里开始。\n \n爱好，吧。很开心到目前为止，还能保持对新技术的不变的热情。自己还能保持 ·了解· -> ·喜欢· -> ·接受· -> ·学习· ···> (使用) 的套路。\n \n前前后后折腾过很多遍，时间过去了，一些事物也随之变化了很多。有些当时感觉不错的东西，现在看来也变得普通了。技术的更新速度实在太快，在接受中学习，在学习中放弃，最后剩下的是当前还算awesome的。\n \n一切从新开始。保持平常心，继续前进。\n","source":"_posts/感悟.md","raw":"---\ntitle: 一点感悟\ndate: 2019-04-06 1:16:25\ntags:\n  - 随笔\n---\n关于Blog，是一个相对“持久”的话题。\n \n一直想说点什么，很多时候也不知道从哪里开始。\n \n爱好，吧。很开心到目前为止，还能保持对新技术的不变的热情。自己还能保持 ·了解· -> ·喜欢· -> ·接受· -> ·学习· ···> (使用) 的套路。\n \n前前后后折腾过很多遍，时间过去了，一些事物也随之变化了很多。有些当时感觉不错的东西，现在看来也变得普通了。技术的更新速度实在太快，在接受中学习，在学习中放弃，最后剩下的是当前还算awesome的。\n \n一切从新开始。保持平常心，继续前进。\n","slug":"感悟","published":1,"updated":"2019-04-10T01:54:32.450Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxbmj0s20005ekmhqouwky5n","content":"<p>关于Blog，是一个相对“持久”的话题。</p>\n<p>一直想说点什么，很多时候也不知道从哪里开始。</p>\n<p>爱好，吧。很开心到目前为止，还能保持对新技术的不变的热情。自己还能保持 ·了解· -&gt; ·喜欢· -&gt; ·接受· -&gt; ·学习· ···&gt; (使用) 的套路。</p>\n<p>前前后后折腾过很多遍，时间过去了，一些事物也随之变化了很多。有些当时感觉不错的东西，现在看来也变得普通了。技术的更新速度实在太快，在接受中学习，在学习中放弃，最后剩下的是当前还算awesome的。</p>\n<p>一切从新开始。保持平常心，继续前进。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>关于Blog，是一个相对“持久”的话题。</p>\n<p>一直想说点什么，很多时候也不知道从哪里开始。</p>\n<p>爱好，吧。很开心到目前为止，还能保持对新技术的不变的热情。自己还能保持 ·了解· -&gt; ·喜欢· -&gt; ·接受· -&gt; ·学习· ···&gt; (使用) 的套路。</p>\n<p>前前后后折腾过很多遍，时间过去了，一些事物也随之变化了很多。有些当时感觉不错的东西，现在看来也变得普通了。技术的更新速度实在太快，在接受中学习，在学习中放弃，最后剩下的是当前还算awesome的。</p>\n<p>一切从新开始。保持平常心，继续前进。</p>\n"},{"layout":"post","title":"在CentOS/RHEL 7/6 & Fedora 30-25上安装Python 3.7","date":"2019-06-21T08:59:20.000Z","_content":"\n### 安装必要包\nPython安装需要GCC编译器\n```bash\nyum install gcc openssl-devel bzip2-devel libffi-devel\n```\n\n### 下载Python 3.7\n```bash\nwget https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tgz\n```\n解压\n```bash\ntar xzf Python-3.7.3.tgz\n```\n\n### 安装Python 3.7\n```bash\n./configure --enable-optimizations\nmake\nmake install\n```\n\n### 检查Python版本\n```bash\npython3.7 -V\n```\n","source":"_posts/install-python3-7-on-centos.md","raw":"---\nlayout: post\ntitle: 在CentOS/RHEL 7/6 & Fedora 30-25上安装Python 3.7\ndate: 2019-06-21 16:59:20\ntags:\n    - CentOSx\n---\n\n### 安装必要包\nPython安装需要GCC编译器\n```bash\nyum install gcc openssl-devel bzip2-devel libffi-devel\n```\n\n### 下载Python 3.7\n```bash\nwget https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tgz\n```\n解压\n```bash\ntar xzf Python-3.7.3.tgz\n```\n\n### 安装Python 3.7\n```bash\n./configure --enable-optimizations\nmake\nmake install\n```\n\n### 检查Python版本\n```bash\npython3.7 -V\n```\n","slug":"install-python3-7-on-centos","published":1,"updated":"2019-06-21T09:04:52.689Z","comments":1,"photos":[],"link":"","_id":"cjxbmj0s40007ekmhbocq7435","content":"<h3 id=\"安装必要包\"><a href=\"#安装必要包\" class=\"headerlink\" title=\"安装必要包\"></a>安装必要包</h3><p>Python安装需要GCC编译器</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">yum <span class=\"token function\">install</span> gcc openssl-devel bzip2-devel libffi-devel\n</code></pre>\n<h3 id=\"下载Python-3-7\"><a href=\"#下载Python-3-7\" class=\"headerlink\" title=\"下载Python 3.7\"></a>下载Python 3.7</h3><pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tgz\n</code></pre>\n<p>解压</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">tar</span> xzf Python-3.7.3.tgz\n</code></pre>\n<h3 id=\"安装Python-3-7\"><a href=\"#安装Python-3-7\" class=\"headerlink\" title=\"安装Python 3.7\"></a>安装Python 3.7</h3><pre class=\" language-bash\"><code class=\"language-bash\">./configure --enable-optimizations\n<span class=\"token function\">make</span>\n<span class=\"token function\">make</span> <span class=\"token function\">install</span>\n</code></pre>\n<h3 id=\"检查Python版本\"><a href=\"#检查Python版本\" class=\"headerlink\" title=\"检查Python版本\"></a>检查Python版本</h3><pre class=\" language-bash\"><code class=\"language-bash\">python3.7 -V\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"安装必要包\"><a href=\"#安装必要包\" class=\"headerlink\" title=\"安装必要包\"></a>安装必要包</h3><p>Python安装需要GCC编译器</p>\n<pre><code class=\"bash\">yum install gcc openssl-devel bzip2-devel libffi-devel\n</code></pre>\n<h3 id=\"下载Python-3-7\"><a href=\"#下载Python-3-7\" class=\"headerlink\" title=\"下载Python 3.7\"></a>下载Python 3.7</h3><pre><code class=\"bash\">wget https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tgz\n</code></pre>\n<p>解压</p>\n<pre><code class=\"bash\">tar xzf Python-3.7.3.tgz\n</code></pre>\n<h3 id=\"安装Python-3-7\"><a href=\"#安装Python-3-7\" class=\"headerlink\" title=\"安装Python 3.7\"></a>安装Python 3.7</h3><pre><code class=\"bash\">./configure --enable-optimizations\nmake\nmake install\n</code></pre>\n<h3 id=\"检查Python版本\"><a href=\"#检查Python版本\" class=\"headerlink\" title=\"检查Python版本\"></a>检查Python版本</h3><pre><code class=\"bash\">python3.7 -V\n</code></pre>\n"},{"layout":"post","title":"库木塔格沙漠&火焰山一日游","date":"2019-05-04T16:01:01.000Z","_content":"\n## 库木塔格沙漠\n\n在13：10分左右，沙漠越野车到达沙漠顶部\n\n![门票](https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1412.jpg?x-oss-process=style/compress)\n\n### 第一张沙漠照片\n\n![第一张沙漠照片](https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1431.jpg?x-oss-process=style/compress)\n\n### 2\n\n![2](https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1434.jpg?x-oss-process=style/compress)\n\n### 3\n\n![3](https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1436.jpg?x-oss-process=style/compress)\n\n### 4\n\n![4](https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1439.jpg?x-oss-process=style/compress)\n\n### 5\n\n![5](https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1441.jpg?x-oss-process=style/compress)\n\n### 6\n\n![6](https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1446.jpg?x-oss-process=style/compress)\n\n### 7\n \n![7](https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1451.jpg?x-oss-process=style/compress)\n\n### 8\n \n![8](https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1462.jpg?x-oss-process=style/compress)\n\n### 9\n\n![9](https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1464.jpg?x-oss-process=style/compress)\n\n沙漠和城市的交界，沙不退，人不进。\n\n## 火焰山\n\n这里待的时间不是很长。\n\n### 1\n\n![1](https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1479.jpg?x-oss-process=style/compress)\n\n### 2\n\n![2](https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1480.jpg?x-oss-process=style/compress)\n\n### 3\n\n![3](https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1482.jpg?x-oss-process=style/compress)\n\n导游说，这里曾经是海，可能是真的。没有下过雨，也可能是真的。\n\n### 4\n\n![4](https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1466.jpg?x-oss-process=style/compress)\n\n导游说今天不很热，热的时候达到过80度以上。\n","source":"_posts/库木塔格沙漠-火焰山一日游.md","raw":"---\nlayout: post\ntitle: 库木塔格沙漠&火焰山一日游\ndate: 2019-05-05 00:01:01\ntags:\n- 随笔\n- 旅行\n- 吐鲁番\n---\n\n## 库木塔格沙漠\n\n在13：10分左右，沙漠越野车到达沙漠顶部\n\n![门票](https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1412.jpg?x-oss-process=style/compress)\n\n### 第一张沙漠照片\n\n![第一张沙漠照片](https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1431.jpg?x-oss-process=style/compress)\n\n### 2\n\n![2](https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1434.jpg?x-oss-process=style/compress)\n\n### 3\n\n![3](https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1436.jpg?x-oss-process=style/compress)\n\n### 4\n\n![4](https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1439.jpg?x-oss-process=style/compress)\n\n### 5\n\n![5](https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1441.jpg?x-oss-process=style/compress)\n\n### 6\n\n![6](https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1446.jpg?x-oss-process=style/compress)\n\n### 7\n \n![7](https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1451.jpg?x-oss-process=style/compress)\n\n### 8\n \n![8](https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1462.jpg?x-oss-process=style/compress)\n\n### 9\n\n![9](https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1464.jpg?x-oss-process=style/compress)\n\n沙漠和城市的交界，沙不退，人不进。\n\n## 火焰山\n\n这里待的时间不是很长。\n\n### 1\n\n![1](https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1479.jpg?x-oss-process=style/compress)\n\n### 2\n\n![2](https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1480.jpg?x-oss-process=style/compress)\n\n### 3\n\n![3](https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1482.jpg?x-oss-process=style/compress)\n\n导游说，这里曾经是海，可能是真的。没有下过雨，也可能是真的。\n\n### 4\n\n![4](https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1466.jpg?x-oss-process=style/compress)\n\n导游说今天不很热，热的时候达到过80度以上。\n","slug":"库木塔格沙漠-火焰山一日游","published":1,"updated":"2019-05-23T09:47:53.683Z","comments":1,"photos":[],"link":"","_id":"cjxbmj0s50008ekmhga8uejh1","content":"<h2 id=\"库木塔格沙漠\"><a href=\"#库木塔格沙漠\" class=\"headerlink\" title=\"库木塔格沙漠\"></a>库木塔格沙漠</h2><p>在13：10分左右，沙漠越野车到达沙漠顶部</p>\n<p><img src=\"https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1412.jpg?x-oss-process=style/compress\" alt=\"门票\"></p>\n<h3 id=\"第一张沙漠照片\"><a href=\"#第一张沙漠照片\" class=\"headerlink\" title=\"第一张沙漠照片\"></a>第一张沙漠照片</h3><p><img src=\"https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1431.jpg?x-oss-process=style/compress\" alt=\"第一张沙漠照片\"></p>\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h3><p><img src=\"https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1434.jpg?x-oss-process=style/compress\" alt=\"2\"></p>\n<h3 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h3><p><img src=\"https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1436.jpg?x-oss-process=style/compress\" alt=\"3\"></p>\n<h3 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4\"></a>4</h3><p><img src=\"https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1439.jpg?x-oss-process=style/compress\" alt=\"4\"></p>\n<h3 id=\"5\"><a href=\"#5\" class=\"headerlink\" title=\"5\"></a>5</h3><p><img src=\"https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1441.jpg?x-oss-process=style/compress\" alt=\"5\"></p>\n<h3 id=\"6\"><a href=\"#6\" class=\"headerlink\" title=\"6\"></a>6</h3><p><img src=\"https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1446.jpg?x-oss-process=style/compress\" alt=\"6\"></p>\n<h3 id=\"7\"><a href=\"#7\" class=\"headerlink\" title=\"7\"></a>7</h3><p><img src=\"https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1451.jpg?x-oss-process=style/compress\" alt=\"7\"></p>\n<h3 id=\"8\"><a href=\"#8\" class=\"headerlink\" title=\"8\"></a>8</h3><p><img src=\"https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1462.jpg?x-oss-process=style/compress\" alt=\"8\"></p>\n<h3 id=\"9\"><a href=\"#9\" class=\"headerlink\" title=\"9\"></a>9</h3><p><img src=\"https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1464.jpg?x-oss-process=style/compress\" alt=\"9\"></p>\n<p>沙漠和城市的交界，沙不退，人不进。</p>\n<h2 id=\"火焰山\"><a href=\"#火焰山\" class=\"headerlink\" title=\"火焰山\"></a>火焰山</h2><p>这里待的时间不是很长。</p>\n<h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h3><p><img src=\"https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1479.jpg?x-oss-process=style/compress\" alt=\"1\"></p>\n<h3 id=\"2-1\"><a href=\"#2-1\" class=\"headerlink\" title=\"2\"></a>2</h3><p><img src=\"https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1480.jpg?x-oss-process=style/compress\" alt=\"2\"></p>\n<h3 id=\"3-1\"><a href=\"#3-1\" class=\"headerlink\" title=\"3\"></a>3</h3><p><img src=\"https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1482.jpg?x-oss-process=style/compress\" alt=\"3\"></p>\n<p>导游说，这里曾经是海，可能是真的。没有下过雨，也可能是真的。</p>\n<h3 id=\"4-1\"><a href=\"#4-1\" class=\"headerlink\" title=\"4\"></a>4</h3><p><img src=\"https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1466.jpg?x-oss-process=style/compress\" alt=\"4\"></p>\n<p>导游说今天不很热，热的时候达到过80度以上。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"库木塔格沙漠\"><a href=\"#库木塔格沙漠\" class=\"headerlink\" title=\"库木塔格沙漠\"></a>库木塔格沙漠</h2><p>在13：10分左右，沙漠越野车到达沙漠顶部</p>\n<p><img src=\"https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1412.jpg?x-oss-process=style/compress\" alt=\"门票\"></p>\n<h3 id=\"第一张沙漠照片\"><a href=\"#第一张沙漠照片\" class=\"headerlink\" title=\"第一张沙漠照片\"></a>第一张沙漠照片</h3><p><img src=\"https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1431.jpg?x-oss-process=style/compress\" alt=\"第一张沙漠照片\"></p>\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h3><p><img src=\"https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1434.jpg?x-oss-process=style/compress\" alt=\"2\"></p>\n<h3 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h3><p><img src=\"https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1436.jpg?x-oss-process=style/compress\" alt=\"3\"></p>\n<h3 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4\"></a>4</h3><p><img src=\"https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1439.jpg?x-oss-process=style/compress\" alt=\"4\"></p>\n<h3 id=\"5\"><a href=\"#5\" class=\"headerlink\" title=\"5\"></a>5</h3><p><img src=\"https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1441.jpg?x-oss-process=style/compress\" alt=\"5\"></p>\n<h3 id=\"6\"><a href=\"#6\" class=\"headerlink\" title=\"6\"></a>6</h3><p><img src=\"https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1446.jpg?x-oss-process=style/compress\" alt=\"6\"></p>\n<h3 id=\"7\"><a href=\"#7\" class=\"headerlink\" title=\"7\"></a>7</h3><p><img src=\"https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1451.jpg?x-oss-process=style/compress\" alt=\"7\"></p>\n<h3 id=\"8\"><a href=\"#8\" class=\"headerlink\" title=\"8\"></a>8</h3><p><img src=\"https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1462.jpg?x-oss-process=style/compress\" alt=\"8\"></p>\n<h3 id=\"9\"><a href=\"#9\" class=\"headerlink\" title=\"9\"></a>9</h3><p><img src=\"https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1464.jpg?x-oss-process=style/compress\" alt=\"9\"></p>\n<p>沙漠和城市的交界，沙不退，人不进。</p>\n<h2 id=\"火焰山\"><a href=\"#火焰山\" class=\"headerlink\" title=\"火焰山\"></a>火焰山</h2><p>这里待的时间不是很长。</p>\n<h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h3><p><img src=\"https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1479.jpg?x-oss-process=style/compress\" alt=\"1\"></p>\n<h3 id=\"2-1\"><a href=\"#2-1\" class=\"headerlink\" title=\"2\"></a>2</h3><p><img src=\"https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1480.jpg?x-oss-process=style/compress\" alt=\"2\"></p>\n<h3 id=\"3-1\"><a href=\"#3-1\" class=\"headerlink\" title=\"3\"></a>3</h3><p><img src=\"https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1482.jpg?x-oss-process=style/compress\" alt=\"3\"></p>\n<p>导游说，这里曾经是海，可能是真的。没有下过雨，也可能是真的。</p>\n<h3 id=\"4-1\"><a href=\"#4-1\" class=\"headerlink\" title=\"4\"></a>4</h3><p><img src=\"https://snoopy-blog.oss-cn-shanghai.aliyuncs.com/assets/IMG_1466.jpg?x-oss-process=style/compress\" alt=\"4\"></p>\n<p>导游说今天不很热，热的时候达到过80度以上。</p>\n"},{"layout":"post","title":"金丝雀(金丝雀测试，金丝雀部署)了解一下","date":"2019-06-10T09:54:11.000Z","_content":"\n在软件测试中，金丝雀([canary](https://whatis.techtarget.com/definition/canary-canary-testing))是将编程代码更改推送给不知道他们正在接收新代码的一小组最终用户。因为金丝雀只分发给少数用户，所以它的影响相对较小，如果新代码被证明是错误的，变化可以迅速逆转。通常自动化的金丝雀测试(canary test)在沙盒环境中的测试完成后运行。\n \n对于增量代码更改，使用金丝雀([canary](https://whatis.techtarget.com/definition/canary-canary-testing))方法提供功能允许开发团队快速评估代码版本是否提供了所需的结果。选择“金丝雀”一词来描述向一部分用户推送的代码，是因为金丝雀曾被用于煤矿开采当有毒气体达到危险水平时提醒矿工。与煤矿中的金丝雀一样，被选中在金丝雀测试(canary test)中接收新代码的最终用户并不知道他被用来提供预警。\n \n![金丝雀测试](/images/06-10/canary_testing.jpg)\n> 在金丝雀([canary](https://whatis.techtarget.com/definition/canary-canary-testing))测试中，最终用户的一小部分用作更新的测试组。如果更新中的任何内容导致问题，它会在大量用户感受到影响之前向IT团队发出警报。\n\n### *参考:*\n- [wiki/Canary](https://en.wikipedia.org/wiki/Canary)\n- [canary-canary-testing](https://whatis.techtarget.com/definition/canary-canary-testing)","source":"_posts/about-canary.md","raw":"---\nlayout: post\ntitle: 金丝雀(金丝雀测试，金丝雀部署)了解一下\ndate: 2019-06-10 17:54:11\ntags: \n  - 测试\n---\n\n在软件测试中，金丝雀([canary](https://whatis.techtarget.com/definition/canary-canary-testing))是将编程代码更改推送给不知道他们正在接收新代码的一小组最终用户。因为金丝雀只分发给少数用户，所以它的影响相对较小，如果新代码被证明是错误的，变化可以迅速逆转。通常自动化的金丝雀测试(canary test)在沙盒环境中的测试完成后运行。\n \n对于增量代码更改，使用金丝雀([canary](https://whatis.techtarget.com/definition/canary-canary-testing))方法提供功能允许开发团队快速评估代码版本是否提供了所需的结果。选择“金丝雀”一词来描述向一部分用户推送的代码，是因为金丝雀曾被用于煤矿开采当有毒气体达到危险水平时提醒矿工。与煤矿中的金丝雀一样，被选中在金丝雀测试(canary test)中接收新代码的最终用户并不知道他被用来提供预警。\n \n![金丝雀测试](/images/06-10/canary_testing.jpg)\n> 在金丝雀([canary](https://whatis.techtarget.com/definition/canary-canary-testing))测试中，最终用户的一小部分用作更新的测试组。如果更新中的任何内容导致问题，它会在大量用户感受到影响之前向IT团队发出警报。\n\n### *参考:*\n- [wiki/Canary](https://en.wikipedia.org/wiki/Canary)\n- [canary-canary-testing](https://whatis.techtarget.com/definition/canary-canary-testing)","slug":"about-canary","published":1,"updated":"2019-06-10T10:20:45.248Z","comments":1,"photos":[],"link":"","_id":"cjxbmj0s6000aekmhyubxhr9t","content":"<p>在软件测试中，金丝雀(<a href=\"https://whatis.techtarget.com/definition/canary-canary-testing\" target=\"_blank\" rel=\"noopener\">canary</a>)是将编程代码更改推送给不知道他们正在接收新代码的一小组最终用户。因为金丝雀只分发给少数用户，所以它的影响相对较小，如果新代码被证明是错误的，变化可以迅速逆转。通常自动化的金丝雀测试(canary test)在沙盒环境中的测试完成后运行。</p>\n<p>对于增量代码更改，使用金丝雀(<a href=\"https://whatis.techtarget.com/definition/canary-canary-testing\" target=\"_blank\" rel=\"noopener\">canary</a>)方法提供功能允许开发团队快速评估代码版本是否提供了所需的结果。选择“金丝雀”一词来描述向一部分用户推送的代码，是因为金丝雀曾被用于煤矿开采当有毒气体达到危险水平时提醒矿工。与煤矿中的金丝雀一样，被选中在金丝雀测试(canary test)中接收新代码的最终用户并不知道他被用来提供预警。</p>\n<p><img src=\"/images/06-10/canary_testing.jpg\" alt=\"金丝雀测试\"></p>\n<blockquote>\n<p>在金丝雀(<a href=\"https://whatis.techtarget.com/definition/canary-canary-testing\" target=\"_blank\" rel=\"noopener\">canary</a>)测试中，最终用户的一小部分用作更新的测试组。如果更新中的任何内容导致问题，它会在大量用户感受到影响之前向IT团队发出警报。</p>\n</blockquote>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考:\"></a><em>参考:</em></h3><ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Canary\" target=\"_blank\" rel=\"noopener\">wiki/Canary</a></li>\n<li><a href=\"https://whatis.techtarget.com/definition/canary-canary-testing\" target=\"_blank\" rel=\"noopener\">canary-canary-testing</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>在软件测试中，金丝雀(<a href=\"https://whatis.techtarget.com/definition/canary-canary-testing\" target=\"_blank\" rel=\"noopener\">canary</a>)是将编程代码更改推送给不知道他们正在接收新代码的一小组最终用户。因为金丝雀只分发给少数用户，所以它的影响相对较小，如果新代码被证明是错误的，变化可以迅速逆转。通常自动化的金丝雀测试(canary test)在沙盒环境中的测试完成后运行。</p>\n<p>对于增量代码更改，使用金丝雀(<a href=\"https://whatis.techtarget.com/definition/canary-canary-testing\" target=\"_blank\" rel=\"noopener\">canary</a>)方法提供功能允许开发团队快速评估代码版本是否提供了所需的结果。选择“金丝雀”一词来描述向一部分用户推送的代码，是因为金丝雀曾被用于煤矿开采当有毒气体达到危险水平时提醒矿工。与煤矿中的金丝雀一样，被选中在金丝雀测试(canary test)中接收新代码的最终用户并不知道他被用来提供预警。</p>\n<p><img src=\"/images/06-10/canary_testing.jpg\" alt=\"金丝雀测试\"></p>\n<blockquote>\n<p>在金丝雀(<a href=\"https://whatis.techtarget.com/definition/canary-canary-testing\" target=\"_blank\" rel=\"noopener\">canary</a>)测试中，最终用户的一小部分用作更新的测试组。如果更新中的任何内容导致问题，它会在大量用户感受到影响之前向IT团队发出警报。</p>\n</blockquote>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考:\"></a><em>参考:</em></h3><ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Canary\" target=\"_blank\" rel=\"noopener\">wiki/Canary</a></li>\n<li><a href=\"https://whatis.techtarget.com/definition/canary-canary-testing\" target=\"_blank\" rel=\"noopener\">canary-canary-testing</a></li>\n</ul>\n"},{"layout":"post","title":"kubespray(2.10.3)部署高可用Kubernetes集群","date":"2019-06-25T02:50:57.000Z","_content":"\n![](/images/06-25/Affordable-Kubernetes.png)\n\nKubernetes集群部署方式很多，网上也有大量实践和文章。几种主要部署方式对比:\n \n|部署方案|\t优点|\t缺点|\n|-|-|-|\n|[Kubeadm](https://github.com/kubernetes/kubeadm)|\t官方出品|\t部署较繁琐、不够透明|\n|[Kubespray](https://kubespray.io)|\t官方出品、部署较简单、懂Ansible就能上手|\t不够透明|\n|[RKE](https://github.com/rancher/rke)|\t部署较简单、需要花一些时间了解RKE的cluster.yml配置文件|\t不够透明|\n|[手动部署](https://k8s-deploy.mzhpan.cn)| 第三方操作文档\t完全透明、可配置、便于理解K8s各组件之间的关系|\t部署过程很繁琐，容易出错\n\n\n本文记录使用 [Kubespray 2.10.3](https://kubespray.io) 部署高可用Kubernetes集群。\n\n### 主机准备\n|主机名|IP|\n|-|-|\n|ha-k8s-001|192.168.1.113|\n|ha-k8s-002|192.168.1.114|\n|ha-k8s-003|192.168.1.115|\n\n### 获取容器镜像\n国内gcr.io、k8s.gcr.io都是不可达的，部署时会因为无法拉取镜像导致失败。这里的解决方案是通过VPS代理，在[GCP](https://console.cloud.google.com)将需要的镜像同步到国内。\nkubespray需要的镜像地址在`roles/download/defaults/main.yml`可以找到。\n同步脚本:`get_images.sh`\n```bash\n#!/usr/bin/env bash\n\nALIYUN_BASE_REPO=\"registry.cn-hangzhou.aliyuncs.com/brucexu\"\n\n# quay.io/coreos\nimages1=(\n\tetcd:v3.2.26\n    flannel:v0.11.0\n    flannel-cni:v0.3.0\n)\n\nfor imageName in ${images1[@]} ; do\n    docker pull quay.io/coreos/$imageName\n    docker tag quay.io/coreos/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# docker.io/calico\nimages2=(\n    node:v3.4.0\n    cni:v3.4.0\n    kube-controllers:v3.4.0\n    routereflector:v0.6.1\n    typha:v3.4.4\n)\n\nfor imageName in ${images2[@]} ; do\n    docker pull docker.io/calico/$imageName\n    docker tag docker.io/calico/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# gcr.io/google_containers\nimages3=(\n    pause-amd64:3.1\n    kube-registry-proxy:0.4\n    metrics-server-amd64:v0.3.2\n    kubernetes-dashboard-amd64:v1.10.1\n)\n\nfor imageName in ${images3[@]} ; do\n    docker pull gcr.io/google_containers/$imageName\n    docker tag gcr.io/google_containers/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# docker.io/xueshanf\nimages4=(\n    install-socat:latest\n)\n\nfor imageName in ${images4[@]} ; do\n    docker pull docker.io/xueshanf/$imageName\n    docker tag docker.io/xueshanf/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# quay.io/l23network\nimages5=(\n    k8s-netchecker-agent:v1.0\n    k8s-netchecker-server:v1.0\n)\n\nfor imageName in ${images5[@]} ; do\n    docker pull quay.io/l23network/$imageName\n    docker tag quay.io/l23network/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n\n# docker.io/weaveworks\nimages6=(\n    weave-kube:2.5.1\n    weave-npc:2.5.1\n)\n\nfor imageName in ${images6[@]} ; do\n    docker pull docker.io/weaveworks/$imageName\n    docker tag docker.io/weaveworks/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# docker.io/contiv\nimages7=(\n    netplugin:1.2.1\n    netplugin-init:latest\n    auth_proxy:1.2.1\n    ovs:latest\n)\n\nfor imageName in ${images7[@]} ; do\n    docker pull docker.io/contiv/$imageName\n    docker tag docker.io/contiv/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# docker.io/ferest\nimages8=(\n    etcd-initer:latest\n)\n\nfor imageName in ${images8[@]} ; do\n    docker pull docker.io/ferest/$imageName\n    docker tag docker.io/ferest/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# docker.io/cilium\nimages9=(\n    cilium:v1.3.0\n)\n\nfor imageName in ${images9[@]} ; do\n    docker pull docker.io/cilium/$imageName\n    docker tag docker.io/cilium/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# docker.io/library\nimages10=(\n    busybox:1.28.4\n)\n\n# docker.io/cloudnativelabs\nimages11=(\n    kube-router:v0.2.5\n)\n\nfor imageName in ${images11[@]} ; do\n    docker pull docker.io/cloudnativelabs/$imageName\n    docker tag docker.io/cloudnativelabs/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# docker.io/nfvpe\nimages12=(\n    multus:v3.1.autoconf\n)\n\nfor imageName in ${images12[@]} ; do\n    docker pull docker.io/nfvpe/$imageName\n    docker tag docker.io/nfvpe/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# docker.io\nimages13=(\n    nginx:1.15\n    haproxy:1.9\n    busybox:latest\n    busybox:1.29.2\n    registry:2.6\n)\n\nfor imageName in ${images13[@]} ; do\n    docker pull docker.io/$imageName\n    docker tag docker.io/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# docker.io/coredns\nimages14=(\n    coredns:1.5.0\n)\n\nfor imageName in ${images14[@]} ; do\n    docker pull docker.io/coredns/$imageName\n    docker tag docker.io/coredns/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# k8s.gcr.io\nimages15=(\n    k8s-dns-node-cache:1.15.1\n    cluster-proportional-autoscaler-amd64:1.4.0\n    addon-resizer:1.8.3\n    kube-apiserver:v1.14.3\n    kube-controller-manager:v1.14.3\n    kube-scheduler:v1.14.3\n    kube-proxy:v1.14.3\n    kube-apiserver-amd64:v1.14.3\n    kube-controller-manager-amd64:v1.14.3\n    kube-scheduler-amd64:v1.14.3\n    kube-proxy-amd64:v1.14.3\n    pause:3.1\n    etcd:3.3.10\n    coredns:1.3.1\n)\n\nfor imageName in ${images15[@]} ; do\n    docker pull k8s.gcr.io/$imageName\n    docker tag k8s.gcr.io/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# docker.io/lachlanevenson\nimages16=(\n    k8s-helm:v2.13.1\n)\n\nfor imageName in ${images16[@]} ; do\n    docker pull docker.io/lachlanevenson/$imageName\n    docker tag docker.io/lachlanevenson/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n    \n# gcr.io/kubernetes-helm\nimages17=(\n    tiller:v2.13.1\n)\n\nfor imageName in ${images17[@]} ; do\n    docker pull gcr.io/kubernetes-helm/$imageName\n    docker tag gcr.io/kubernetes-helm/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# quay.io/external_storage\nimages18=(\n    local-volume-provisioner:v2.1.0\n    cephfs-provisioner:v2.1.0-k8s1.11\n    rbd-provisioner:v2.1.1-k8s1.11\n)\n\nfor imageName in ${images18[@]} ; do\n    docker pull quay.io/external_storage/$imageName\n    docker tag quay.io/external_storage/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# docker.io/rancher\nimages19=(\n    local-path-provisioner:v0.0.2\n)\n\nfor imageName in ${images19[@]} ; do\n    docker pull docker.io/rancher/$imageName\n    docker tag docker.io/rancher/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# quay.io/kubernetes-ingress-controller\nimages20=(\n    nginx-ingress-controller:0.21.0\n)\n\nfor imageName in ${images20[@]} ; do\n    docker pull quay.io/kubernetes-ingress-controller/$imageName\n    docker tag quay.io/kubernetes-ingress-controller/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# quay.io/jetstack\nimages21=(\n    cert-manager-controller:v0.5.2\n)\n\nfor imageName in ${images21[@]} ; do\n    docker pull quay.io/jetstack/$imageName\n    docker tag quay.io/jetstack/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n```\n\n### 安装Kubespray\n选择一台主机作为ansible-client机器，安装kubespray：\n```bash\ngit clone https://github.com/kubernetes-incubator/kubespray.git\ncd kubespray\ngit checkout v2.10.3\n```\n\n### 配置Kubespray\n#### 主机配置:\n```bash\ncp -rf inventory/sample inventory/mycluster\n```\n#### 安装配置Kubespray需要包\n```bash\nsudo pip install -r requirements.txt\n```\n \n修改`inventory/mycluster/inventory.ini`如下:\n```bash\n[all]\nha-k8s-001 ansible_host=192.168.1.113  ip=192.168.1.113 etcd_member_name=etcd1\nha-k8s-002 ansible_host=192.168.1.114  ip=192.168.1.114 etcd_member_name=etcd2\nha-k8s-003 ansible_host=192.168.1.115  ip=192.168.1.115 etcd_member_name=etcd3\n\n[kube-master]\nha-k8s-001\nha-k8s-002\n\n[etcd]\nha-k8s-001\nha-k8s-002\nha-k8s-003\n\n[kube-node]\nha-k8s-001\nha-k8s-002\nha-k8s-003\n\n[k8s-cluster:children]\nkube-master\nkube-node\n```\n\n#### 修改二进制下载地址&镜像源\n打开`roles/download/defaults/main.yml`，可以看到\n```bash\n# Download URLs\nkubeadm_download_url: \"https://storage.googleapis.com/kubernetes-release/release/{{ kubeadm_version }}/bin/linux/{{ image_arch }}/kubeadm\"\nhyperkube_download_url: \"https://storage.googleapis.com/kubernetes-release/release/{{ kube_version }}/bin/linux/{{ image_arch }}/hyperkube\"\netcd_download_url: \"https://github.com/coreos/etcd/releases/download/{{ etcd_version }}/etcd-{{ etcd_version }}-linux-{{ image_arch }}.tar.gz\"\ncni_download_url: \"https://github.com/containernetworking/plugins/releases/download/{{ cni_version }}/cni-plugins-linux-{{ image_arch }}-{{ cni_version }}.tgz\"\ncalicoctl_download_url: \"https://github.com/projectcalico/calicoctl/releases/download/{{ calico_ctl_version }}/calicoctl-linux-{{ image_arch }}\"\n```\n部分地址国内不可达,可考虑通过VPS手动获取，上传到阿里云OSS，然后替换成OSS地址。\n\n修改`inventory/mycluster/group_vars/k8s-cluster/k8s-cluster.yml`，如下：\n```bash\n# Download URLs\nkubeadm_download_url: \"https://snp-assets.oss-cn-shanghai.aliyuncs.com/softws/kubespray_download/v2.10.3/kubeadm\"\nhyperkube_download_url: \"https://snp-assets.oss-cn-shanghai.aliyuncs.com/softws/kubespray_download/v2.10.3/hyperkube\"\netcd_download_url: \"https://snp-assets.oss-cn-shanghai.aliyuncs.com/softws/kubespray_download/v2.10.3/etcd-v3.2.26-linux-amd64.tar.gz\"\ncni_download_url: \"https://snp-assets.oss-cn-shanghai.aliyuncs.com/softws/kubespray_download/v2.10.3/cni-plugins-amd64-v0.6.0.tgz\"\ncalicoctl_download_url: \"https://snp-assets.oss-cn-shanghai.aliyuncs.com/softws/kubespray_download/v2.10.3/calicoctl-linux-amd64\"\n\netcd_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/etcd\"\nflannel_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/flannel\"\nflannel_cni_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/flannel-cni\"\ncalico_node_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/node\"\ncalico_cni_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/cni\"\ncalico_policy_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/kube-controllers\"\ncalico_rr_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/routereflector\"\ncalico_typha_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/typha\"\npod_infra_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/pause-amd64\"\ninstall_socat_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/install-socat\"\nnetcheck_agent_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/k8s-netchecker-agent\"\nnetcheck_server_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/k8s-netchecker-server\"\nweave_kube_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/weave-kube\"\nweave_npc_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/weave-npc\"\ncontiv_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/netplugin\"\ncontiv_init_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/netplugin-init\"\ncontiv_auth_proxy_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/auth_proxy\"\ncontiv_etcd_init_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/etcd-initer\"\ncontiv_ovs_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/ovs\"\ncilium_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/cilium\"\ncilium_init_image_repo: \"docker.io/library/busybox\"\nkube_router_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/kube-router\"\nmultus_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/multus\"\nnginx_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/nginx\"\n\nhaproxy_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/haproxy\"\n\ncoredns_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/coredns\"\n\nnodelocaldns_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/k8s-dns-node-cache\"\n\ndnsautoscaler_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/cluster-proportional-autoscaler-{{ image_arch }}\"\ntest_image_repo: docker.io/busybox\nbusybox_image_repo: docker.io/busybox\nhelm_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/k8s-helm\"\ntiller_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/tiller\"\n\nregistry_image_repo: \"docker.io/registry\"\nregistry_proxy_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/kube-registry-proxy\"\nmetrics_server_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/metrics-server-amd64\"\nlocal_volume_provisioner_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/local-volume-provisioner\"\ncephfs_provisioner_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/cephfs-provisioner\"\nrbd_provisioner_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/rbd-provisioner\"\nlocal_path_provisioner_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/local-path-provisioner\"\ningress_nginx_controller_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/nginx-ingress-controller\"\ncert_manager_controller_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/cert-manager-controller\"\naddon_resizer_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/addon-resizer\"\n\ndashboard_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/kubernetes-dashboard-amd64\"\n\n\nhelm_stable_repo_url: \"https://aliacs-app-catalog.oss-cn-hangzhou.aliyuncs.com/charts/\"\n```\n\n#### 部署\n使用ansible playbook部署kubespray\n```bash\nansible-playbook -i inventory/mycluster/inventory.ini --become --become-user=root cluster.yml\n```\n \n> TIPS:\n> kubespray调用kubeadm初始化master节点可能或比较漫长，打开`roles/kubernetes/master/tasks/kubeadm-setup.yml`可以看到:\n```bash\n- name: kubeadm | Initialize first master\n  command: >-\n    timeout -k 600s 600s\n```\n> 可以根据自己的需求修改timeout\n\n等待大概20分钟左右，Kubernetes集群即可安装完成\n\n#### 验证\n```bash\nkubectl get nodes\n```\n正常应该看到:\n```bash\nNAME         STATUS   ROLES    AGE   VERSION\nha-k8s-001   Ready    master   8m31s   v1.14.3\nha-k8s-002   Ready    master   7m26s   v1.14.3\nha-k8s-003   Ready    master   6m59s   v1.14.3\n```\n然后就可以快乐的享用了^_^\n\n### 访问Kubernetes Dashboard\n可以参考以下方案：\n1. [https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/#accessing-the-dashboard-ui](https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/#accessing-the-dashboard-ui)\n2. [https://k8s-deploy.mzhpan.cn/09-2.dashboard%E6%8F%92%E4%BB%B6.html#%E8%AE%BF%E9%97%AE-dashboard](https://k8s-deploy.mzhpan.cn/09-2.dashboard%E6%8F%92%E4%BB%B6.html#%E8%AE%BF%E9%97%AE-dashboard)\n\n\n> **参考:**\n> \n> *[生产环境工具kubespray](https://kubernetes.io/docs/setup/production-environment/tools/kubespray/)*\n>\n> *[Kubespray 快速开始](https://kubespray.io/#/?id=quick-start)*","source":"_posts/install-k8s-HA-using-kubespray.md","raw":"---\nlayout: post\ntitle: kubespray(2.10.3)部署高可用Kubernetes集群\ndate: 2019-06-25 10:50:57\ntags:\n    - Kubernetes\n---\n\n![](/images/06-25/Affordable-Kubernetes.png)\n\nKubernetes集群部署方式很多，网上也有大量实践和文章。几种主要部署方式对比:\n \n|部署方案|\t优点|\t缺点|\n|-|-|-|\n|[Kubeadm](https://github.com/kubernetes/kubeadm)|\t官方出品|\t部署较繁琐、不够透明|\n|[Kubespray](https://kubespray.io)|\t官方出品、部署较简单、懂Ansible就能上手|\t不够透明|\n|[RKE](https://github.com/rancher/rke)|\t部署较简单、需要花一些时间了解RKE的cluster.yml配置文件|\t不够透明|\n|[手动部署](https://k8s-deploy.mzhpan.cn)| 第三方操作文档\t完全透明、可配置、便于理解K8s各组件之间的关系|\t部署过程很繁琐，容易出错\n\n\n本文记录使用 [Kubespray 2.10.3](https://kubespray.io) 部署高可用Kubernetes集群。\n\n### 主机准备\n|主机名|IP|\n|-|-|\n|ha-k8s-001|192.168.1.113|\n|ha-k8s-002|192.168.1.114|\n|ha-k8s-003|192.168.1.115|\n\n### 获取容器镜像\n国内gcr.io、k8s.gcr.io都是不可达的，部署时会因为无法拉取镜像导致失败。这里的解决方案是通过VPS代理，在[GCP](https://console.cloud.google.com)将需要的镜像同步到国内。\nkubespray需要的镜像地址在`roles/download/defaults/main.yml`可以找到。\n同步脚本:`get_images.sh`\n```bash\n#!/usr/bin/env bash\n\nALIYUN_BASE_REPO=\"registry.cn-hangzhou.aliyuncs.com/brucexu\"\n\n# quay.io/coreos\nimages1=(\n\tetcd:v3.2.26\n    flannel:v0.11.0\n    flannel-cni:v0.3.0\n)\n\nfor imageName in ${images1[@]} ; do\n    docker pull quay.io/coreos/$imageName\n    docker tag quay.io/coreos/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# docker.io/calico\nimages2=(\n    node:v3.4.0\n    cni:v3.4.0\n    kube-controllers:v3.4.0\n    routereflector:v0.6.1\n    typha:v3.4.4\n)\n\nfor imageName in ${images2[@]} ; do\n    docker pull docker.io/calico/$imageName\n    docker tag docker.io/calico/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# gcr.io/google_containers\nimages3=(\n    pause-amd64:3.1\n    kube-registry-proxy:0.4\n    metrics-server-amd64:v0.3.2\n    kubernetes-dashboard-amd64:v1.10.1\n)\n\nfor imageName in ${images3[@]} ; do\n    docker pull gcr.io/google_containers/$imageName\n    docker tag gcr.io/google_containers/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# docker.io/xueshanf\nimages4=(\n    install-socat:latest\n)\n\nfor imageName in ${images4[@]} ; do\n    docker pull docker.io/xueshanf/$imageName\n    docker tag docker.io/xueshanf/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# quay.io/l23network\nimages5=(\n    k8s-netchecker-agent:v1.0\n    k8s-netchecker-server:v1.0\n)\n\nfor imageName in ${images5[@]} ; do\n    docker pull quay.io/l23network/$imageName\n    docker tag quay.io/l23network/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n\n# docker.io/weaveworks\nimages6=(\n    weave-kube:2.5.1\n    weave-npc:2.5.1\n)\n\nfor imageName in ${images6[@]} ; do\n    docker pull docker.io/weaveworks/$imageName\n    docker tag docker.io/weaveworks/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# docker.io/contiv\nimages7=(\n    netplugin:1.2.1\n    netplugin-init:latest\n    auth_proxy:1.2.1\n    ovs:latest\n)\n\nfor imageName in ${images7[@]} ; do\n    docker pull docker.io/contiv/$imageName\n    docker tag docker.io/contiv/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# docker.io/ferest\nimages8=(\n    etcd-initer:latest\n)\n\nfor imageName in ${images8[@]} ; do\n    docker pull docker.io/ferest/$imageName\n    docker tag docker.io/ferest/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# docker.io/cilium\nimages9=(\n    cilium:v1.3.0\n)\n\nfor imageName in ${images9[@]} ; do\n    docker pull docker.io/cilium/$imageName\n    docker tag docker.io/cilium/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# docker.io/library\nimages10=(\n    busybox:1.28.4\n)\n\n# docker.io/cloudnativelabs\nimages11=(\n    kube-router:v0.2.5\n)\n\nfor imageName in ${images11[@]} ; do\n    docker pull docker.io/cloudnativelabs/$imageName\n    docker tag docker.io/cloudnativelabs/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# docker.io/nfvpe\nimages12=(\n    multus:v3.1.autoconf\n)\n\nfor imageName in ${images12[@]} ; do\n    docker pull docker.io/nfvpe/$imageName\n    docker tag docker.io/nfvpe/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# docker.io\nimages13=(\n    nginx:1.15\n    haproxy:1.9\n    busybox:latest\n    busybox:1.29.2\n    registry:2.6\n)\n\nfor imageName in ${images13[@]} ; do\n    docker pull docker.io/$imageName\n    docker tag docker.io/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# docker.io/coredns\nimages14=(\n    coredns:1.5.0\n)\n\nfor imageName in ${images14[@]} ; do\n    docker pull docker.io/coredns/$imageName\n    docker tag docker.io/coredns/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# k8s.gcr.io\nimages15=(\n    k8s-dns-node-cache:1.15.1\n    cluster-proportional-autoscaler-amd64:1.4.0\n    addon-resizer:1.8.3\n    kube-apiserver:v1.14.3\n    kube-controller-manager:v1.14.3\n    kube-scheduler:v1.14.3\n    kube-proxy:v1.14.3\n    kube-apiserver-amd64:v1.14.3\n    kube-controller-manager-amd64:v1.14.3\n    kube-scheduler-amd64:v1.14.3\n    kube-proxy-amd64:v1.14.3\n    pause:3.1\n    etcd:3.3.10\n    coredns:1.3.1\n)\n\nfor imageName in ${images15[@]} ; do\n    docker pull k8s.gcr.io/$imageName\n    docker tag k8s.gcr.io/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# docker.io/lachlanevenson\nimages16=(\n    k8s-helm:v2.13.1\n)\n\nfor imageName in ${images16[@]} ; do\n    docker pull docker.io/lachlanevenson/$imageName\n    docker tag docker.io/lachlanevenson/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n    \n# gcr.io/kubernetes-helm\nimages17=(\n    tiller:v2.13.1\n)\n\nfor imageName in ${images17[@]} ; do\n    docker pull gcr.io/kubernetes-helm/$imageName\n    docker tag gcr.io/kubernetes-helm/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# quay.io/external_storage\nimages18=(\n    local-volume-provisioner:v2.1.0\n    cephfs-provisioner:v2.1.0-k8s1.11\n    rbd-provisioner:v2.1.1-k8s1.11\n)\n\nfor imageName in ${images18[@]} ; do\n    docker pull quay.io/external_storage/$imageName\n    docker tag quay.io/external_storage/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# docker.io/rancher\nimages19=(\n    local-path-provisioner:v0.0.2\n)\n\nfor imageName in ${images19[@]} ; do\n    docker pull docker.io/rancher/$imageName\n    docker tag docker.io/rancher/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# quay.io/kubernetes-ingress-controller\nimages20=(\n    nginx-ingress-controller:0.21.0\n)\n\nfor imageName in ${images20[@]} ; do\n    docker pull quay.io/kubernetes-ingress-controller/$imageName\n    docker tag quay.io/kubernetes-ingress-controller/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# quay.io/jetstack\nimages21=(\n    cert-manager-controller:v0.5.2\n)\n\nfor imageName in ${images21[@]} ; do\n    docker pull quay.io/jetstack/$imageName\n    docker tag quay.io/jetstack/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n```\n\n### 安装Kubespray\n选择一台主机作为ansible-client机器，安装kubespray：\n```bash\ngit clone https://github.com/kubernetes-incubator/kubespray.git\ncd kubespray\ngit checkout v2.10.3\n```\n\n### 配置Kubespray\n#### 主机配置:\n```bash\ncp -rf inventory/sample inventory/mycluster\n```\n#### 安装配置Kubespray需要包\n```bash\nsudo pip install -r requirements.txt\n```\n \n修改`inventory/mycluster/inventory.ini`如下:\n```bash\n[all]\nha-k8s-001 ansible_host=192.168.1.113  ip=192.168.1.113 etcd_member_name=etcd1\nha-k8s-002 ansible_host=192.168.1.114  ip=192.168.1.114 etcd_member_name=etcd2\nha-k8s-003 ansible_host=192.168.1.115  ip=192.168.1.115 etcd_member_name=etcd3\n\n[kube-master]\nha-k8s-001\nha-k8s-002\n\n[etcd]\nha-k8s-001\nha-k8s-002\nha-k8s-003\n\n[kube-node]\nha-k8s-001\nha-k8s-002\nha-k8s-003\n\n[k8s-cluster:children]\nkube-master\nkube-node\n```\n\n#### 修改二进制下载地址&镜像源\n打开`roles/download/defaults/main.yml`，可以看到\n```bash\n# Download URLs\nkubeadm_download_url: \"https://storage.googleapis.com/kubernetes-release/release/{{ kubeadm_version }}/bin/linux/{{ image_arch }}/kubeadm\"\nhyperkube_download_url: \"https://storage.googleapis.com/kubernetes-release/release/{{ kube_version }}/bin/linux/{{ image_arch }}/hyperkube\"\netcd_download_url: \"https://github.com/coreos/etcd/releases/download/{{ etcd_version }}/etcd-{{ etcd_version }}-linux-{{ image_arch }}.tar.gz\"\ncni_download_url: \"https://github.com/containernetworking/plugins/releases/download/{{ cni_version }}/cni-plugins-linux-{{ image_arch }}-{{ cni_version }}.tgz\"\ncalicoctl_download_url: \"https://github.com/projectcalico/calicoctl/releases/download/{{ calico_ctl_version }}/calicoctl-linux-{{ image_arch }}\"\n```\n部分地址国内不可达,可考虑通过VPS手动获取，上传到阿里云OSS，然后替换成OSS地址。\n\n修改`inventory/mycluster/group_vars/k8s-cluster/k8s-cluster.yml`，如下：\n```bash\n# Download URLs\nkubeadm_download_url: \"https://snp-assets.oss-cn-shanghai.aliyuncs.com/softws/kubespray_download/v2.10.3/kubeadm\"\nhyperkube_download_url: \"https://snp-assets.oss-cn-shanghai.aliyuncs.com/softws/kubespray_download/v2.10.3/hyperkube\"\netcd_download_url: \"https://snp-assets.oss-cn-shanghai.aliyuncs.com/softws/kubespray_download/v2.10.3/etcd-v3.2.26-linux-amd64.tar.gz\"\ncni_download_url: \"https://snp-assets.oss-cn-shanghai.aliyuncs.com/softws/kubespray_download/v2.10.3/cni-plugins-amd64-v0.6.0.tgz\"\ncalicoctl_download_url: \"https://snp-assets.oss-cn-shanghai.aliyuncs.com/softws/kubespray_download/v2.10.3/calicoctl-linux-amd64\"\n\netcd_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/etcd\"\nflannel_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/flannel\"\nflannel_cni_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/flannel-cni\"\ncalico_node_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/node\"\ncalico_cni_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/cni\"\ncalico_policy_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/kube-controllers\"\ncalico_rr_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/routereflector\"\ncalico_typha_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/typha\"\npod_infra_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/pause-amd64\"\ninstall_socat_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/install-socat\"\nnetcheck_agent_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/k8s-netchecker-agent\"\nnetcheck_server_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/k8s-netchecker-server\"\nweave_kube_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/weave-kube\"\nweave_npc_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/weave-npc\"\ncontiv_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/netplugin\"\ncontiv_init_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/netplugin-init\"\ncontiv_auth_proxy_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/auth_proxy\"\ncontiv_etcd_init_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/etcd-initer\"\ncontiv_ovs_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/ovs\"\ncilium_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/cilium\"\ncilium_init_image_repo: \"docker.io/library/busybox\"\nkube_router_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/kube-router\"\nmultus_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/multus\"\nnginx_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/nginx\"\n\nhaproxy_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/haproxy\"\n\ncoredns_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/coredns\"\n\nnodelocaldns_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/k8s-dns-node-cache\"\n\ndnsautoscaler_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/cluster-proportional-autoscaler-{{ image_arch }}\"\ntest_image_repo: docker.io/busybox\nbusybox_image_repo: docker.io/busybox\nhelm_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/k8s-helm\"\ntiller_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/tiller\"\n\nregistry_image_repo: \"docker.io/registry\"\nregistry_proxy_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/kube-registry-proxy\"\nmetrics_server_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/metrics-server-amd64\"\nlocal_volume_provisioner_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/local-volume-provisioner\"\ncephfs_provisioner_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/cephfs-provisioner\"\nrbd_provisioner_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/rbd-provisioner\"\nlocal_path_provisioner_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/local-path-provisioner\"\ningress_nginx_controller_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/nginx-ingress-controller\"\ncert_manager_controller_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/cert-manager-controller\"\naddon_resizer_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/addon-resizer\"\n\ndashboard_image_repo: \"registry.cn-hangzhou.aliyuncs.com/brucexu/kubernetes-dashboard-amd64\"\n\n\nhelm_stable_repo_url: \"https://aliacs-app-catalog.oss-cn-hangzhou.aliyuncs.com/charts/\"\n```\n\n#### 部署\n使用ansible playbook部署kubespray\n```bash\nansible-playbook -i inventory/mycluster/inventory.ini --become --become-user=root cluster.yml\n```\n \n> TIPS:\n> kubespray调用kubeadm初始化master节点可能或比较漫长，打开`roles/kubernetes/master/tasks/kubeadm-setup.yml`可以看到:\n```bash\n- name: kubeadm | Initialize first master\n  command: >-\n    timeout -k 600s 600s\n```\n> 可以根据自己的需求修改timeout\n\n等待大概20分钟左右，Kubernetes集群即可安装完成\n\n#### 验证\n```bash\nkubectl get nodes\n```\n正常应该看到:\n```bash\nNAME         STATUS   ROLES    AGE   VERSION\nha-k8s-001   Ready    master   8m31s   v1.14.3\nha-k8s-002   Ready    master   7m26s   v1.14.3\nha-k8s-003   Ready    master   6m59s   v1.14.3\n```\n然后就可以快乐的享用了^_^\n\n### 访问Kubernetes Dashboard\n可以参考以下方案：\n1. [https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/#accessing-the-dashboard-ui](https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/#accessing-the-dashboard-ui)\n2. [https://k8s-deploy.mzhpan.cn/09-2.dashboard%E6%8F%92%E4%BB%B6.html#%E8%AE%BF%E9%97%AE-dashboard](https://k8s-deploy.mzhpan.cn/09-2.dashboard%E6%8F%92%E4%BB%B6.html#%E8%AE%BF%E9%97%AE-dashboard)\n\n\n> **参考:**\n> \n> *[生产环境工具kubespray](https://kubernetes.io/docs/setup/production-environment/tools/kubespray/)*\n>\n> *[Kubespray 快速开始](https://kubespray.io/#/?id=quick-start)*","slug":"install-k8s-HA-using-kubespray","published":1,"updated":"2019-06-25T09:57:47.492Z","_id":"cjxbmj0sc000rekmhi53oo4qc","comments":1,"photos":[],"link":"","content":"<p><img src=\"/images/06-25/Affordable-Kubernetes.png\" alt></p>\n<p>Kubernetes集群部署方式很多，网上也有大量实践和文章。几种主要部署方式对比:</p>\n<table>\n<thead>\n<tr>\n<th>部署方案</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/kubernetes/kubeadm\" target=\"_blank\" rel=\"noopener\">Kubeadm</a></td>\n<td>官方出品</td>\n<td>部署较繁琐、不够透明</td>\n</tr>\n<tr>\n<td><a href=\"https://kubespray.io\" target=\"_blank\" rel=\"noopener\">Kubespray</a></td>\n<td>官方出品、部署较简单、懂Ansible就能上手</td>\n<td>不够透明</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/rancher/rke\" target=\"_blank\" rel=\"noopener\">RKE</a></td>\n<td>部署较简单、需要花一些时间了解RKE的cluster.yml配置文件</td>\n<td>不够透明</td>\n</tr>\n<tr>\n<td><a href=\"https://k8s-deploy.mzhpan.cn\" target=\"_blank\" rel=\"noopener\">手动部署</a></td>\n<td>第三方操作文档    完全透明、可配置、便于理解K8s各组件之间的关系</td>\n<td>部署过程很繁琐，容易出错</td>\n</tr>\n</tbody>\n</table>\n<p>本文记录使用 <a href=\"https://kubespray.io\" target=\"_blank\" rel=\"noopener\">Kubespray 2.10.3</a> 部署高可用Kubernetes集群。</p>\n<h3 id=\"主机准备\"><a href=\"#主机准备\" class=\"headerlink\" title=\"主机准备\"></a>主机准备</h3><table>\n<thead>\n<tr>\n<th>主机名</th>\n<th>IP</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ha-k8s-001</td>\n<td>192.168.1.113</td>\n</tr>\n<tr>\n<td>ha-k8s-002</td>\n<td>192.168.1.114</td>\n</tr>\n<tr>\n<td>ha-k8s-003</td>\n<td>192.168.1.115</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"获取容器镜像\"><a href=\"#获取容器镜像\" class=\"headerlink\" title=\"获取容器镜像\"></a>获取容器镜像</h3><p>国内gcr.io、k8s.gcr.io都是不可达的，部署时会因为无法拉取镜像导致失败。这里的解决方案是通过VPS代理，在<a href=\"https://console.cloud.google.com\" target=\"_blank\" rel=\"noopener\">GCP</a>将需要的镜像同步到国内。<br>kubespray需要的镜像地址在<code>roles/download/defaults/main.yml</code>可以找到。<br>同步脚本:<code>get_images.sh</code></p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\">#!/usr/bin/env bash</span>\n\nALIYUN_BASE_REPO<span class=\"token operator\">=</span><span class=\"token string\">\"registry.cn-hangzhou.aliyuncs.com/brucexu\"</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># quay.io/coreos</span>\nimages1<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>\n    etcd:v3.2.26\n    flannel:v0.11.0\n    flannel-cni:v0.3.0\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> imageName <span class=\"token keyword\">in</span> <span class=\"token variable\">${images1[@]}</span> <span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n    docker pull quay.io/coreos/<span class=\"token variable\">$imageName</span>\n    docker tag quay.io/coreos/<span class=\"token variable\">$imageName</span> registry.cn-hangzhou.aliyuncs.com/brucexu/<span class=\"token variable\">$imageName</span>\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/<span class=\"token variable\">$imageName</span>\n<span class=\"token keyword\">done</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># docker.io/calico</span>\nimages2<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>\n    node:v3.4.0\n    cni:v3.4.0\n    kube-controllers:v3.4.0\n    routereflector:v0.6.1\n    typha:v3.4.4\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> imageName <span class=\"token keyword\">in</span> <span class=\"token variable\">${images2[@]}</span> <span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n    docker pull docker.io/calico/<span class=\"token variable\">$imageName</span>\n    docker tag docker.io/calico/<span class=\"token variable\">$imageName</span> registry.cn-hangzhou.aliyuncs.com/brucexu/<span class=\"token variable\">$imageName</span>\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/<span class=\"token variable\">$imageName</span>\n<span class=\"token keyword\">done</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># gcr.io/google_containers</span>\nimages3<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>\n    pause-amd64:3.1\n    kube-registry-proxy:0.4\n    metrics-server-amd64:v0.3.2\n    kubernetes-dashboard-amd64:v1.10.1\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> imageName <span class=\"token keyword\">in</span> <span class=\"token variable\">${images3[@]}</span> <span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n    docker pull gcr.io/google_containers/<span class=\"token variable\">$imageName</span>\n    docker tag gcr.io/google_containers/<span class=\"token variable\">$imageName</span> registry.cn-hangzhou.aliyuncs.com/brucexu/<span class=\"token variable\">$imageName</span>\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/<span class=\"token variable\">$imageName</span>\n<span class=\"token keyword\">done</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># docker.io/xueshanf</span>\nimages4<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>\n    install-socat:latest\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> imageName <span class=\"token keyword\">in</span> <span class=\"token variable\">${images4[@]}</span> <span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n    docker pull docker.io/xueshanf/<span class=\"token variable\">$imageName</span>\n    docker tag docker.io/xueshanf/<span class=\"token variable\">$imageName</span> registry.cn-hangzhou.aliyuncs.com/brucexu/<span class=\"token variable\">$imageName</span>\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/<span class=\"token variable\">$imageName</span>\n<span class=\"token keyword\">done</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># quay.io/l23network</span>\nimages5<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>\n    k8s-netchecker-agent:v1.0\n    k8s-netchecker-server:v1.0\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> imageName <span class=\"token keyword\">in</span> <span class=\"token variable\">${images5[@]}</span> <span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n    docker pull quay.io/l23network/<span class=\"token variable\">$imageName</span>\n    docker tag quay.io/l23network/<span class=\"token variable\">$imageName</span> registry.cn-hangzhou.aliyuncs.com/brucexu/<span class=\"token variable\">$imageName</span>\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/<span class=\"token variable\">$imageName</span>\n<span class=\"token keyword\">done</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\"># docker.io/weaveworks</span>\nimages6<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>\n    weave-kube:2.5.1\n    weave-npc:2.5.1\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> imageName <span class=\"token keyword\">in</span> <span class=\"token variable\">${images6[@]}</span> <span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n    docker pull docker.io/weaveworks/<span class=\"token variable\">$imageName</span>\n    docker tag docker.io/weaveworks/<span class=\"token variable\">$imageName</span> registry.cn-hangzhou.aliyuncs.com/brucexu/<span class=\"token variable\">$imageName</span>\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/<span class=\"token variable\">$imageName</span>\n<span class=\"token keyword\">done</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># docker.io/contiv</span>\nimages7<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>\n    netplugin:1.2.1\n    netplugin-init:latest\n    auth_proxy:1.2.1\n    ovs:latest\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> imageName <span class=\"token keyword\">in</span> <span class=\"token variable\">${images7[@]}</span> <span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n    docker pull docker.io/contiv/<span class=\"token variable\">$imageName</span>\n    docker tag docker.io/contiv/<span class=\"token variable\">$imageName</span> registry.cn-hangzhou.aliyuncs.com/brucexu/<span class=\"token variable\">$imageName</span>\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/<span class=\"token variable\">$imageName</span>\n<span class=\"token keyword\">done</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># docker.io/ferest</span>\nimages8<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>\n    etcd-initer:latest\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> imageName <span class=\"token keyword\">in</span> <span class=\"token variable\">${images8[@]}</span> <span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n    docker pull docker.io/ferest/<span class=\"token variable\">$imageName</span>\n    docker tag docker.io/ferest/<span class=\"token variable\">$imageName</span> registry.cn-hangzhou.aliyuncs.com/brucexu/<span class=\"token variable\">$imageName</span>\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/<span class=\"token variable\">$imageName</span>\n<span class=\"token keyword\">done</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># docker.io/cilium</span>\nimages9<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>\n    cilium:v1.3.0\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> imageName <span class=\"token keyword\">in</span> <span class=\"token variable\">${images9[@]}</span> <span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n    docker pull docker.io/cilium/<span class=\"token variable\">$imageName</span>\n    docker tag docker.io/cilium/<span class=\"token variable\">$imageName</span> registry.cn-hangzhou.aliyuncs.com/brucexu/<span class=\"token variable\">$imageName</span>\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/<span class=\"token variable\">$imageName</span>\n<span class=\"token keyword\">done</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># docker.io/library</span>\nimages10<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>\n    busybox:1.28.4\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># docker.io/cloudnativelabs</span>\nimages11<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>\n    kube-router:v0.2.5\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> imageName <span class=\"token keyword\">in</span> <span class=\"token variable\">${images11[@]}</span> <span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n    docker pull docker.io/cloudnativelabs/<span class=\"token variable\">$imageName</span>\n    docker tag docker.io/cloudnativelabs/<span class=\"token variable\">$imageName</span> registry.cn-hangzhou.aliyuncs.com/brucexu/<span class=\"token variable\">$imageName</span>\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/<span class=\"token variable\">$imageName</span>\n<span class=\"token keyword\">done</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># docker.io/nfvpe</span>\nimages12<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>\n    multus:v3.1.autoconf\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> imageName <span class=\"token keyword\">in</span> <span class=\"token variable\">${images12[@]}</span> <span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n    docker pull docker.io/nfvpe/<span class=\"token variable\">$imageName</span>\n    docker tag docker.io/nfvpe/<span class=\"token variable\">$imageName</span> registry.cn-hangzhou.aliyuncs.com/brucexu/<span class=\"token variable\">$imageName</span>\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/<span class=\"token variable\">$imageName</span>\n<span class=\"token keyword\">done</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># docker.io</span>\nimages13<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>\n    nginx:1.15\n    haproxy:1.9\n    busybox:latest\n    busybox:1.29.2\n    registry:2.6\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> imageName <span class=\"token keyword\">in</span> <span class=\"token variable\">${images13[@]}</span> <span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n    docker pull docker.io/<span class=\"token variable\">$imageName</span>\n    docker tag docker.io/<span class=\"token variable\">$imageName</span> registry.cn-hangzhou.aliyuncs.com/brucexu/<span class=\"token variable\">$imageName</span>\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/<span class=\"token variable\">$imageName</span>\n<span class=\"token keyword\">done</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># docker.io/coredns</span>\nimages14<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>\n    coredns:1.5.0\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> imageName <span class=\"token keyword\">in</span> <span class=\"token variable\">${images14[@]}</span> <span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n    docker pull docker.io/coredns/<span class=\"token variable\">$imageName</span>\n    docker tag docker.io/coredns/<span class=\"token variable\">$imageName</span> registry.cn-hangzhou.aliyuncs.com/brucexu/<span class=\"token variable\">$imageName</span>\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/<span class=\"token variable\">$imageName</span>\n<span class=\"token keyword\">done</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># k8s.gcr.io</span>\nimages15<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>\n    k8s-dns-node-cache:1.15.1\n    cluster-proportional-autoscaler-amd64:1.4.0\n    addon-resizer:1.8.3\n    kube-apiserver:v1.14.3\n    kube-controller-manager:v1.14.3\n    kube-scheduler:v1.14.3\n    kube-proxy:v1.14.3\n    kube-apiserver-amd64:v1.14.3\n    kube-controller-manager-amd64:v1.14.3\n    kube-scheduler-amd64:v1.14.3\n    kube-proxy-amd64:v1.14.3\n    pause:3.1\n    etcd:3.3.10\n    coredns:1.3.1\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> imageName <span class=\"token keyword\">in</span> <span class=\"token variable\">${images15[@]}</span> <span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n    docker pull k8s.gcr.io/<span class=\"token variable\">$imageName</span>\n    docker tag k8s.gcr.io/<span class=\"token variable\">$imageName</span> registry.cn-hangzhou.aliyuncs.com/brucexu/<span class=\"token variable\">$imageName</span>\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/<span class=\"token variable\">$imageName</span>\n<span class=\"token keyword\">done</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># docker.io/lachlanevenson</span>\nimages16<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>\n    k8s-helm:v2.13.1\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> imageName <span class=\"token keyword\">in</span> <span class=\"token variable\">${images16[@]}</span> <span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n    docker pull docker.io/lachlanevenson/<span class=\"token variable\">$imageName</span>\n    docker tag docker.io/lachlanevenson/<span class=\"token variable\">$imageName</span> registry.cn-hangzhou.aliyuncs.com/brucexu/<span class=\"token variable\">$imageName</span>\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/<span class=\"token variable\">$imageName</span>\n<span class=\"token keyword\">done</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># gcr.io/kubernetes-helm</span>\nimages17<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>\n    tiller:v2.13.1\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> imageName <span class=\"token keyword\">in</span> <span class=\"token variable\">${images17[@]}</span> <span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n    docker pull gcr.io/kubernetes-helm/<span class=\"token variable\">$imageName</span>\n    docker tag gcr.io/kubernetes-helm/<span class=\"token variable\">$imageName</span> registry.cn-hangzhou.aliyuncs.com/brucexu/<span class=\"token variable\">$imageName</span>\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/<span class=\"token variable\">$imageName</span>\n<span class=\"token keyword\">done</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># quay.io/external_storage</span>\nimages18<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>\n    local-volume-provisioner:v2.1.0\n    cephfs-provisioner:v2.1.0-k8s1.11\n    rbd-provisioner:v2.1.1-k8s1.11\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> imageName <span class=\"token keyword\">in</span> <span class=\"token variable\">${images18[@]}</span> <span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n    docker pull quay.io/external_storage/<span class=\"token variable\">$imageName</span>\n    docker tag quay.io/external_storage/<span class=\"token variable\">$imageName</span> registry.cn-hangzhou.aliyuncs.com/brucexu/<span class=\"token variable\">$imageName</span>\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/<span class=\"token variable\">$imageName</span>\n<span class=\"token keyword\">done</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># docker.io/rancher</span>\nimages19<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>\n    local-path-provisioner:v0.0.2\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> imageName <span class=\"token keyword\">in</span> <span class=\"token variable\">${images19[@]}</span> <span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n    docker pull docker.io/rancher/<span class=\"token variable\">$imageName</span>\n    docker tag docker.io/rancher/<span class=\"token variable\">$imageName</span> registry.cn-hangzhou.aliyuncs.com/brucexu/<span class=\"token variable\">$imageName</span>\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/<span class=\"token variable\">$imageName</span>\n<span class=\"token keyword\">done</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># quay.io/kubernetes-ingress-controller</span>\nimages20<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>\n    nginx-ingress-controller:0.21.0\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> imageName <span class=\"token keyword\">in</span> <span class=\"token variable\">${images20[@]}</span> <span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n    docker pull quay.io/kubernetes-ingress-controller/<span class=\"token variable\">$imageName</span>\n    docker tag quay.io/kubernetes-ingress-controller/<span class=\"token variable\">$imageName</span> registry.cn-hangzhou.aliyuncs.com/brucexu/<span class=\"token variable\">$imageName</span>\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/<span class=\"token variable\">$imageName</span>\n<span class=\"token keyword\">done</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># quay.io/jetstack</span>\nimages21<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>\n    cert-manager-controller:v0.5.2\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> imageName <span class=\"token keyword\">in</span> <span class=\"token variable\">${images21[@]}</span> <span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n    docker pull quay.io/jetstack/<span class=\"token variable\">$imageName</span>\n    docker tag quay.io/jetstack/<span class=\"token variable\">$imageName</span> registry.cn-hangzhou.aliyuncs.com/brucexu/<span class=\"token variable\">$imageName</span>\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/<span class=\"token variable\">$imageName</span>\n<span class=\"token keyword\">done</span>\n</code></pre>\n<h3 id=\"安装Kubespray\"><a href=\"#安装Kubespray\" class=\"headerlink\" title=\"安装Kubespray\"></a>安装Kubespray</h3><p>选择一台主机作为ansible-client机器，安装kubespray：</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/kubernetes-incubator/kubespray.git\n<span class=\"token function\">cd</span> kubespray\n<span class=\"token function\">git</span> checkout v2.10.3\n</code></pre>\n<h3 id=\"配置Kubespray\"><a href=\"#配置Kubespray\" class=\"headerlink\" title=\"配置Kubespray\"></a>配置Kubespray</h3><h4 id=\"主机配置\"><a href=\"#主机配置\" class=\"headerlink\" title=\"主机配置:\"></a>主机配置:</h4><pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">cp</span> -rf inventory/sample inventory/mycluster\n</code></pre>\n<h4 id=\"安装配置Kubespray需要包\"><a href=\"#安装配置Kubespray需要包\" class=\"headerlink\" title=\"安装配置Kubespray需要包\"></a>安装配置Kubespray需要包</h4><pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> pip <span class=\"token function\">install</span> -r requirements.txt\n</code></pre>\n<p>修改<code>inventory/mycluster/inventory.ini</code>如下:</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>all<span class=\"token punctuation\">]</span>\nha-k8s-001 ansible_host<span class=\"token operator\">=</span>192.168.1.113  ip<span class=\"token operator\">=</span>192.168.1.113 etcd_member_name<span class=\"token operator\">=</span>etcd1\nha-k8s-002 ansible_host<span class=\"token operator\">=</span>192.168.1.114  ip<span class=\"token operator\">=</span>192.168.1.114 etcd_member_name<span class=\"token operator\">=</span>etcd2\nha-k8s-003 ansible_host<span class=\"token operator\">=</span>192.168.1.115  ip<span class=\"token operator\">=</span>192.168.1.115 etcd_member_name<span class=\"token operator\">=</span>etcd3\n\n<span class=\"token punctuation\">[</span>kube-master<span class=\"token punctuation\">]</span>\nha-k8s-001\nha-k8s-002\n\n<span class=\"token punctuation\">[</span>etcd<span class=\"token punctuation\">]</span>\nha-k8s-001\nha-k8s-002\nha-k8s-003\n\n<span class=\"token punctuation\">[</span>kube-node<span class=\"token punctuation\">]</span>\nha-k8s-001\nha-k8s-002\nha-k8s-003\n\n<span class=\"token punctuation\">[</span>k8s-cluster:children<span class=\"token punctuation\">]</span>\nkube-master\nkube-node\n</code></pre>\n<h4 id=\"修改二进制下载地址-amp-镜像源\"><a href=\"#修改二进制下载地址-amp-镜像源\" class=\"headerlink\" title=\"修改二进制下载地址&amp;镜像源\"></a>修改二进制下载地址&amp;镜像源</h4><p>打开<code>roles/download/defaults/main.yml</code>，可以看到</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># Download URLs</span>\nkubeadm_download_url: <span class=\"token string\">\"https://storage.googleapis.com/kubernetes-release/release/{{ kubeadm_version }}/bin/linux/{{ image_arch }}/kubeadm\"</span>\nhyperkube_download_url: <span class=\"token string\">\"https://storage.googleapis.com/kubernetes-release/release/{{ kube_version }}/bin/linux/{{ image_arch }}/hyperkube\"</span>\netcd_download_url: <span class=\"token string\">\"https://github.com/coreos/etcd/releases/download/{{ etcd_version }}/etcd-{{ etcd_version }}-linux-{{ image_arch }}.tar.gz\"</span>\ncni_download_url: <span class=\"token string\">\"https://github.com/containernetworking/plugins/releases/download/{{ cni_version }}/cni-plugins-linux-{{ image_arch }}-{{ cni_version }}.tgz\"</span>\ncalicoctl_download_url: <span class=\"token string\">\"https://github.com/projectcalico/calicoctl/releases/download/{{ calico_ctl_version }}/calicoctl-linux-{{ image_arch }}\"</span>\n</code></pre>\n<p>部分地址国内不可达,可考虑通过VPS手动获取，上传到阿里云OSS，然后替换成OSS地址。</p>\n<p>修改<code>inventory/mycluster/group_vars/k8s-cluster/k8s-cluster.yml</code>，如下：</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token comment\" spellcheck=\"true\"># Download URLs</span>\nkubeadm_download_url: <span class=\"token string\">\"https://snp-assets.oss-cn-shanghai.aliyuncs.com/softws/kubespray_download/v2.10.3/kubeadm\"</span>\nhyperkube_download_url: <span class=\"token string\">\"https://snp-assets.oss-cn-shanghai.aliyuncs.com/softws/kubespray_download/v2.10.3/hyperkube\"</span>\netcd_download_url: <span class=\"token string\">\"https://snp-assets.oss-cn-shanghai.aliyuncs.com/softws/kubespray_download/v2.10.3/etcd-v3.2.26-linux-amd64.tar.gz\"</span>\ncni_download_url: <span class=\"token string\">\"https://snp-assets.oss-cn-shanghai.aliyuncs.com/softws/kubespray_download/v2.10.3/cni-plugins-amd64-v0.6.0.tgz\"</span>\ncalicoctl_download_url: <span class=\"token string\">\"https://snp-assets.oss-cn-shanghai.aliyuncs.com/softws/kubespray_download/v2.10.3/calicoctl-linux-amd64\"</span>\n\netcd_image_repo: <span class=\"token string\">\"registry.cn-hangzhou.aliyuncs.com/brucexu/etcd\"</span>\nflannel_image_repo: <span class=\"token string\">\"registry.cn-hangzhou.aliyuncs.com/brucexu/flannel\"</span>\nflannel_cni_image_repo: <span class=\"token string\">\"registry.cn-hangzhou.aliyuncs.com/brucexu/flannel-cni\"</span>\ncalico_node_image_repo: <span class=\"token string\">\"registry.cn-hangzhou.aliyuncs.com/brucexu/node\"</span>\ncalico_cni_image_repo: <span class=\"token string\">\"registry.cn-hangzhou.aliyuncs.com/brucexu/cni\"</span>\ncalico_policy_image_repo: <span class=\"token string\">\"registry.cn-hangzhou.aliyuncs.com/brucexu/kube-controllers\"</span>\ncalico_rr_image_repo: <span class=\"token string\">\"registry.cn-hangzhou.aliyuncs.com/brucexu/routereflector\"</span>\ncalico_typha_image_repo: <span class=\"token string\">\"registry.cn-hangzhou.aliyuncs.com/brucexu/typha\"</span>\npod_infra_image_repo: <span class=\"token string\">\"registry.cn-hangzhou.aliyuncs.com/brucexu/pause-amd64\"</span>\ninstall_socat_image_repo: <span class=\"token string\">\"registry.cn-hangzhou.aliyuncs.com/brucexu/install-socat\"</span>\nnetcheck_agent_image_repo: <span class=\"token string\">\"registry.cn-hangzhou.aliyuncs.com/brucexu/k8s-netchecker-agent\"</span>\nnetcheck_server_image_repo: <span class=\"token string\">\"registry.cn-hangzhou.aliyuncs.com/brucexu/k8s-netchecker-server\"</span>\nweave_kube_image_repo: <span class=\"token string\">\"registry.cn-hangzhou.aliyuncs.com/brucexu/weave-kube\"</span>\nweave_npc_image_repo: <span class=\"token string\">\"registry.cn-hangzhou.aliyuncs.com/brucexu/weave-npc\"</span>\ncontiv_image_repo: <span class=\"token string\">\"registry.cn-hangzhou.aliyuncs.com/brucexu/netplugin\"</span>\ncontiv_init_image_repo: <span class=\"token string\">\"registry.cn-hangzhou.aliyuncs.com/brucexu/netplugin-init\"</span>\ncontiv_auth_proxy_image_repo: <span class=\"token string\">\"registry.cn-hangzhou.aliyuncs.com/brucexu/auth_proxy\"</span>\ncontiv_etcd_init_image_repo: <span class=\"token string\">\"registry.cn-hangzhou.aliyuncs.com/brucexu/etcd-initer\"</span>\ncontiv_ovs_image_repo: <span class=\"token string\">\"registry.cn-hangzhou.aliyuncs.com/brucexu/ovs\"</span>\ncilium_image_repo: <span class=\"token string\">\"registry.cn-hangzhou.aliyuncs.com/brucexu/cilium\"</span>\ncilium_init_image_repo: <span class=\"token string\">\"docker.io/library/busybox\"</span>\nkube_router_image_repo: <span class=\"token string\">\"registry.cn-hangzhou.aliyuncs.com/brucexu/kube-router\"</span>\nmultus_image_repo: <span class=\"token string\">\"registry.cn-hangzhou.aliyuncs.com/brucexu/multus\"</span>\nnginx_image_repo: <span class=\"token string\">\"registry.cn-hangzhou.aliyuncs.com/brucexu/nginx\"</span>\n\nhaproxy_image_repo: <span class=\"token string\">\"registry.cn-hangzhou.aliyuncs.com/brucexu/haproxy\"</span>\n\ncoredns_image_repo: <span class=\"token string\">\"registry.cn-hangzhou.aliyuncs.com/brucexu/coredns\"</span>\n\nnodelocaldns_image_repo: <span class=\"token string\">\"registry.cn-hangzhou.aliyuncs.com/brucexu/k8s-dns-node-cache\"</span>\n\ndnsautoscaler_image_repo: <span class=\"token string\">\"registry.cn-hangzhou.aliyuncs.com/brucexu/cluster-proportional-autoscaler-{{ image_arch }}\"</span>\ntest_image_repo: docker.io/busybox\nbusybox_image_repo: docker.io/busybox\nhelm_image_repo: <span class=\"token string\">\"registry.cn-hangzhou.aliyuncs.com/brucexu/k8s-helm\"</span>\ntiller_image_repo: <span class=\"token string\">\"registry.cn-hangzhou.aliyuncs.com/brucexu/tiller\"</span>\n\nregistry_image_repo: <span class=\"token string\">\"docker.io/registry\"</span>\nregistry_proxy_image_repo: <span class=\"token string\">\"registry.cn-hangzhou.aliyuncs.com/brucexu/kube-registry-proxy\"</span>\nmetrics_server_image_repo: <span class=\"token string\">\"registry.cn-hangzhou.aliyuncs.com/brucexu/metrics-server-amd64\"</span>\nlocal_volume_provisioner_image_repo: <span class=\"token string\">\"registry.cn-hangzhou.aliyuncs.com/brucexu/local-volume-provisioner\"</span>\ncephfs_provisioner_image_repo: <span class=\"token string\">\"registry.cn-hangzhou.aliyuncs.com/brucexu/cephfs-provisioner\"</span>\nrbd_provisioner_image_repo: <span class=\"token string\">\"registry.cn-hangzhou.aliyuncs.com/brucexu/rbd-provisioner\"</span>\nlocal_path_provisioner_image_repo: <span class=\"token string\">\"registry.cn-hangzhou.aliyuncs.com/brucexu/local-path-provisioner\"</span>\ningress_nginx_controller_image_repo: <span class=\"token string\">\"registry.cn-hangzhou.aliyuncs.com/brucexu/nginx-ingress-controller\"</span>\ncert_manager_controller_image_repo: <span class=\"token string\">\"registry.cn-hangzhou.aliyuncs.com/brucexu/cert-manager-controller\"</span>\naddon_resizer_image_repo: <span class=\"token string\">\"registry.cn-hangzhou.aliyuncs.com/brucexu/addon-resizer\"</span>\n\ndashboard_image_repo: <span class=\"token string\">\"registry.cn-hangzhou.aliyuncs.com/brucexu/kubernetes-dashboard-amd64\"</span>\n\n\nhelm_stable_repo_url: <span class=\"token string\">\"https://aliacs-app-catalog.oss-cn-hangzhou.aliyuncs.com/charts/\"</span>\n</code></pre>\n<h4 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h4><p>使用ansible playbook部署kubespray</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">ansible-playbook -i inventory/mycluster/inventory.ini --become --become-user<span class=\"token operator\">=</span>root cluster.yml\n</code></pre>\n<blockquote>\n<p>TIPS:<br>kubespray调用kubeadm初始化master节点可能或比较漫长，打开<code>roles/kubernetes/master/tasks/kubeadm-setup.yml</code>可以看到:</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">- name: kubeadm <span class=\"token operator\">|</span> Initialize first master\n  command: <span class=\"token operator\">></span>-\n    <span class=\"token function\">timeout</span> -k 600s 600s\n</code></pre>\n<p>可以根据自己的需求修改timeout</p>\n</blockquote>\n<p>等待大概20分钟左右，Kubernetes集群即可安装完成</p>\n<h4 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h4><pre class=\" language-bash\"><code class=\"language-bash\">kubectl get nodes\n</code></pre>\n<p>正常应该看到:</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">NAME         STATUS   ROLES    AGE   VERSION\nha-k8s-001   Ready    master   8m31s   v1.14.3\nha-k8s-002   Ready    master   7m26s   v1.14.3\nha-k8s-003   Ready    master   6m59s   v1.14.3\n</code></pre>\n<p>然后就可以快乐的享用了^_^</p>\n<h3 id=\"访问Kubernetes-Dashboard\"><a href=\"#访问Kubernetes-Dashboard\" class=\"headerlink\" title=\"访问Kubernetes Dashboard\"></a>访问Kubernetes Dashboard</h3><p>可以参考以下方案：</p>\n<ol>\n<li><a href=\"https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/#accessing-the-dashboard-ui\" target=\"_blank\" rel=\"noopener\">https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/#accessing-the-dashboard-ui</a></li>\n<li><a href=\"https://k8s-deploy.mzhpan.cn/09-2.dashboard%E6%8F%92%E4%BB%B6.html#%E8%AE%BF%E9%97%AE-dashboard\" target=\"_blank\" rel=\"noopener\">https://k8s-deploy.mzhpan.cn/09-2.dashboard%E6%8F%92%E4%BB%B6.html#%E8%AE%BF%E9%97%AE-dashboard</a></li>\n</ol>\n<blockquote>\n<p><strong>参考:</strong></p>\n<p><em><a href=\"https://kubernetes.io/docs/setup/production-environment/tools/kubespray/\" target=\"_blank\" rel=\"noopener\">生产环境工具kubespray</a></em></p>\n<p><em><a href=\"https://kubespray.io/#/?id=quick-start\" target=\"_blank\" rel=\"noopener\">Kubespray 快速开始</a></em></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/06-25/Affordable-Kubernetes.png\" alt></p>\n<p>Kubernetes集群部署方式很多，网上也有大量实践和文章。几种主要部署方式对比:</p>\n<table>\n<thead>\n<tr>\n<th>部署方案</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/kubernetes/kubeadm\" target=\"_blank\" rel=\"noopener\">Kubeadm</a></td>\n<td>官方出品</td>\n<td>部署较繁琐、不够透明</td>\n</tr>\n<tr>\n<td><a href=\"https://kubespray.io\" target=\"_blank\" rel=\"noopener\">Kubespray</a></td>\n<td>官方出品、部署较简单、懂Ansible就能上手</td>\n<td>不够透明</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/rancher/rke\" target=\"_blank\" rel=\"noopener\">RKE</a></td>\n<td>部署较简单、需要花一些时间了解RKE的cluster.yml配置文件</td>\n<td>不够透明</td>\n</tr>\n<tr>\n<td><a href=\"https://k8s-deploy.mzhpan.cn\" target=\"_blank\" rel=\"noopener\">手动部署</a></td>\n<td>第三方操作文档    完全透明、可配置、便于理解K8s各组件之间的关系</td>\n<td>部署过程很繁琐，容易出错</td>\n</tr>\n</tbody>\n</table>\n<p>本文记录使用 <a href=\"https://kubespray.io\" target=\"_blank\" rel=\"noopener\">Kubespray 2.10.3</a> 部署高可用Kubernetes集群。</p>\n<h3 id=\"主机准备\"><a href=\"#主机准备\" class=\"headerlink\" title=\"主机准备\"></a>主机准备</h3><table>\n<thead>\n<tr>\n<th>主机名</th>\n<th>IP</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ha-k8s-001</td>\n<td>192.168.1.113</td>\n</tr>\n<tr>\n<td>ha-k8s-002</td>\n<td>192.168.1.114</td>\n</tr>\n<tr>\n<td>ha-k8s-003</td>\n<td>192.168.1.115</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"获取容器镜像\"><a href=\"#获取容器镜像\" class=\"headerlink\" title=\"获取容器镜像\"></a>获取容器镜像</h3><p>国内gcr.io、k8s.gcr.io都是不可达的，部署时会因为无法拉取镜像导致失败。这里的解决方案是通过VPS代理，在<a href=\"https://console.cloud.google.com\" target=\"_blank\" rel=\"noopener\">GCP</a>将需要的镜像同步到国内。<br>kubespray需要的镜像地址在<code>roles/download/defaults/main.yml</code>可以找到。<br>同步脚本:<code>get_images.sh</code></p>\n<pre><code class=\"bash\">#!/usr/bin/env bash\n\nALIYUN_BASE_REPO=&quot;registry.cn-hangzhou.aliyuncs.com/brucexu&quot;\n\n# quay.io/coreos\nimages1=(\n    etcd:v3.2.26\n    flannel:v0.11.0\n    flannel-cni:v0.3.0\n)\n\nfor imageName in ${images1[@]} ; do\n    docker pull quay.io/coreos/$imageName\n    docker tag quay.io/coreos/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# docker.io/calico\nimages2=(\n    node:v3.4.0\n    cni:v3.4.0\n    kube-controllers:v3.4.0\n    routereflector:v0.6.1\n    typha:v3.4.4\n)\n\nfor imageName in ${images2[@]} ; do\n    docker pull docker.io/calico/$imageName\n    docker tag docker.io/calico/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# gcr.io/google_containers\nimages3=(\n    pause-amd64:3.1\n    kube-registry-proxy:0.4\n    metrics-server-amd64:v0.3.2\n    kubernetes-dashboard-amd64:v1.10.1\n)\n\nfor imageName in ${images3[@]} ; do\n    docker pull gcr.io/google_containers/$imageName\n    docker tag gcr.io/google_containers/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# docker.io/xueshanf\nimages4=(\n    install-socat:latest\n)\n\nfor imageName in ${images4[@]} ; do\n    docker pull docker.io/xueshanf/$imageName\n    docker tag docker.io/xueshanf/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# quay.io/l23network\nimages5=(\n    k8s-netchecker-agent:v1.0\n    k8s-netchecker-server:v1.0\n)\n\nfor imageName in ${images5[@]} ; do\n    docker pull quay.io/l23network/$imageName\n    docker tag quay.io/l23network/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n\n# docker.io/weaveworks\nimages6=(\n    weave-kube:2.5.1\n    weave-npc:2.5.1\n)\n\nfor imageName in ${images6[@]} ; do\n    docker pull docker.io/weaveworks/$imageName\n    docker tag docker.io/weaveworks/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# docker.io/contiv\nimages7=(\n    netplugin:1.2.1\n    netplugin-init:latest\n    auth_proxy:1.2.1\n    ovs:latest\n)\n\nfor imageName in ${images7[@]} ; do\n    docker pull docker.io/contiv/$imageName\n    docker tag docker.io/contiv/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# docker.io/ferest\nimages8=(\n    etcd-initer:latest\n)\n\nfor imageName in ${images8[@]} ; do\n    docker pull docker.io/ferest/$imageName\n    docker tag docker.io/ferest/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# docker.io/cilium\nimages9=(\n    cilium:v1.3.0\n)\n\nfor imageName in ${images9[@]} ; do\n    docker pull docker.io/cilium/$imageName\n    docker tag docker.io/cilium/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# docker.io/library\nimages10=(\n    busybox:1.28.4\n)\n\n# docker.io/cloudnativelabs\nimages11=(\n    kube-router:v0.2.5\n)\n\nfor imageName in ${images11[@]} ; do\n    docker pull docker.io/cloudnativelabs/$imageName\n    docker tag docker.io/cloudnativelabs/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# docker.io/nfvpe\nimages12=(\n    multus:v3.1.autoconf\n)\n\nfor imageName in ${images12[@]} ; do\n    docker pull docker.io/nfvpe/$imageName\n    docker tag docker.io/nfvpe/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# docker.io\nimages13=(\n    nginx:1.15\n    haproxy:1.9\n    busybox:latest\n    busybox:1.29.2\n    registry:2.6\n)\n\nfor imageName in ${images13[@]} ; do\n    docker pull docker.io/$imageName\n    docker tag docker.io/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# docker.io/coredns\nimages14=(\n    coredns:1.5.0\n)\n\nfor imageName in ${images14[@]} ; do\n    docker pull docker.io/coredns/$imageName\n    docker tag docker.io/coredns/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# k8s.gcr.io\nimages15=(\n    k8s-dns-node-cache:1.15.1\n    cluster-proportional-autoscaler-amd64:1.4.0\n    addon-resizer:1.8.3\n    kube-apiserver:v1.14.3\n    kube-controller-manager:v1.14.3\n    kube-scheduler:v1.14.3\n    kube-proxy:v1.14.3\n    kube-apiserver-amd64:v1.14.3\n    kube-controller-manager-amd64:v1.14.3\n    kube-scheduler-amd64:v1.14.3\n    kube-proxy-amd64:v1.14.3\n    pause:3.1\n    etcd:3.3.10\n    coredns:1.3.1\n)\n\nfor imageName in ${images15[@]} ; do\n    docker pull k8s.gcr.io/$imageName\n    docker tag k8s.gcr.io/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# docker.io/lachlanevenson\nimages16=(\n    k8s-helm:v2.13.1\n)\n\nfor imageName in ${images16[@]} ; do\n    docker pull docker.io/lachlanevenson/$imageName\n    docker tag docker.io/lachlanevenson/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# gcr.io/kubernetes-helm\nimages17=(\n    tiller:v2.13.1\n)\n\nfor imageName in ${images17[@]} ; do\n    docker pull gcr.io/kubernetes-helm/$imageName\n    docker tag gcr.io/kubernetes-helm/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# quay.io/external_storage\nimages18=(\n    local-volume-provisioner:v2.1.0\n    cephfs-provisioner:v2.1.0-k8s1.11\n    rbd-provisioner:v2.1.1-k8s1.11\n)\n\nfor imageName in ${images18[@]} ; do\n    docker pull quay.io/external_storage/$imageName\n    docker tag quay.io/external_storage/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# docker.io/rancher\nimages19=(\n    local-path-provisioner:v0.0.2\n)\n\nfor imageName in ${images19[@]} ; do\n    docker pull docker.io/rancher/$imageName\n    docker tag docker.io/rancher/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# quay.io/kubernetes-ingress-controller\nimages20=(\n    nginx-ingress-controller:0.21.0\n)\n\nfor imageName in ${images20[@]} ; do\n    docker pull quay.io/kubernetes-ingress-controller/$imageName\n    docker tag quay.io/kubernetes-ingress-controller/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n\n# quay.io/jetstack\nimages21=(\n    cert-manager-controller:v0.5.2\n)\n\nfor imageName in ${images21[@]} ; do\n    docker pull quay.io/jetstack/$imageName\n    docker tag quay.io/jetstack/$imageName registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\n    docker push registry.cn-hangzhou.aliyuncs.com/brucexu/$imageName\ndone\n</code></pre>\n<h3 id=\"安装Kubespray\"><a href=\"#安装Kubespray\" class=\"headerlink\" title=\"安装Kubespray\"></a>安装Kubespray</h3><p>选择一台主机作为ansible-client机器，安装kubespray：</p>\n<pre><code class=\"bash\">git clone https://github.com/kubernetes-incubator/kubespray.git\ncd kubespray\ngit checkout v2.10.3\n</code></pre>\n<h3 id=\"配置Kubespray\"><a href=\"#配置Kubespray\" class=\"headerlink\" title=\"配置Kubespray\"></a>配置Kubespray</h3><h4 id=\"主机配置\"><a href=\"#主机配置\" class=\"headerlink\" title=\"主机配置:\"></a>主机配置:</h4><pre><code class=\"bash\">cp -rf inventory/sample inventory/mycluster\n</code></pre>\n<h4 id=\"安装配置Kubespray需要包\"><a href=\"#安装配置Kubespray需要包\" class=\"headerlink\" title=\"安装配置Kubespray需要包\"></a>安装配置Kubespray需要包</h4><pre><code class=\"bash\">sudo pip install -r requirements.txt\n</code></pre>\n<p>修改<code>inventory/mycluster/inventory.ini</code>如下:</p>\n<pre><code class=\"bash\">[all]\nha-k8s-001 ansible_host=192.168.1.113  ip=192.168.1.113 etcd_member_name=etcd1\nha-k8s-002 ansible_host=192.168.1.114  ip=192.168.1.114 etcd_member_name=etcd2\nha-k8s-003 ansible_host=192.168.1.115  ip=192.168.1.115 etcd_member_name=etcd3\n\n[kube-master]\nha-k8s-001\nha-k8s-002\n\n[etcd]\nha-k8s-001\nha-k8s-002\nha-k8s-003\n\n[kube-node]\nha-k8s-001\nha-k8s-002\nha-k8s-003\n\n[k8s-cluster:children]\nkube-master\nkube-node\n</code></pre>\n<h4 id=\"修改二进制下载地址-amp-镜像源\"><a href=\"#修改二进制下载地址-amp-镜像源\" class=\"headerlink\" title=\"修改二进制下载地址&amp;镜像源\"></a>修改二进制下载地址&amp;镜像源</h4><p>打开<code>roles/download/defaults/main.yml</code>，可以看到</p>\n<pre><code class=\"bash\"># Download URLs\nkubeadm_download_url: &quot;https://storage.googleapis.com/kubernetes-release/release/{{ kubeadm_version }}/bin/linux/{{ image_arch }}/kubeadm&quot;\nhyperkube_download_url: &quot;https://storage.googleapis.com/kubernetes-release/release/{{ kube_version }}/bin/linux/{{ image_arch }}/hyperkube&quot;\netcd_download_url: &quot;https://github.com/coreos/etcd/releases/download/{{ etcd_version }}/etcd-{{ etcd_version }}-linux-{{ image_arch }}.tar.gz&quot;\ncni_download_url: &quot;https://github.com/containernetworking/plugins/releases/download/{{ cni_version }}/cni-plugins-linux-{{ image_arch }}-{{ cni_version }}.tgz&quot;\ncalicoctl_download_url: &quot;https://github.com/projectcalico/calicoctl/releases/download/{{ calico_ctl_version }}/calicoctl-linux-{{ image_arch }}&quot;\n</code></pre>\n<p>部分地址国内不可达,可考虑通过VPS手动获取，上传到阿里云OSS，然后替换成OSS地址。</p>\n<p>修改<code>inventory/mycluster/group_vars/k8s-cluster/k8s-cluster.yml</code>，如下：</p>\n<pre><code class=\"bash\"># Download URLs\nkubeadm_download_url: &quot;https://snp-assets.oss-cn-shanghai.aliyuncs.com/softws/kubespray_download/v2.10.3/kubeadm&quot;\nhyperkube_download_url: &quot;https://snp-assets.oss-cn-shanghai.aliyuncs.com/softws/kubespray_download/v2.10.3/hyperkube&quot;\netcd_download_url: &quot;https://snp-assets.oss-cn-shanghai.aliyuncs.com/softws/kubespray_download/v2.10.3/etcd-v3.2.26-linux-amd64.tar.gz&quot;\ncni_download_url: &quot;https://snp-assets.oss-cn-shanghai.aliyuncs.com/softws/kubespray_download/v2.10.3/cni-plugins-amd64-v0.6.0.tgz&quot;\ncalicoctl_download_url: &quot;https://snp-assets.oss-cn-shanghai.aliyuncs.com/softws/kubespray_download/v2.10.3/calicoctl-linux-amd64&quot;\n\netcd_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com/brucexu/etcd&quot;\nflannel_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com/brucexu/flannel&quot;\nflannel_cni_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com/brucexu/flannel-cni&quot;\ncalico_node_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com/brucexu/node&quot;\ncalico_cni_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com/brucexu/cni&quot;\ncalico_policy_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com/brucexu/kube-controllers&quot;\ncalico_rr_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com/brucexu/routereflector&quot;\ncalico_typha_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com/brucexu/typha&quot;\npod_infra_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com/brucexu/pause-amd64&quot;\ninstall_socat_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com/brucexu/install-socat&quot;\nnetcheck_agent_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com/brucexu/k8s-netchecker-agent&quot;\nnetcheck_server_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com/brucexu/k8s-netchecker-server&quot;\nweave_kube_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com/brucexu/weave-kube&quot;\nweave_npc_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com/brucexu/weave-npc&quot;\ncontiv_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com/brucexu/netplugin&quot;\ncontiv_init_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com/brucexu/netplugin-init&quot;\ncontiv_auth_proxy_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com/brucexu/auth_proxy&quot;\ncontiv_etcd_init_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com/brucexu/etcd-initer&quot;\ncontiv_ovs_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com/brucexu/ovs&quot;\ncilium_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com/brucexu/cilium&quot;\ncilium_init_image_repo: &quot;docker.io/library/busybox&quot;\nkube_router_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com/brucexu/kube-router&quot;\nmultus_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com/brucexu/multus&quot;\nnginx_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com/brucexu/nginx&quot;\n\nhaproxy_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com/brucexu/haproxy&quot;\n\ncoredns_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com/brucexu/coredns&quot;\n\nnodelocaldns_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com/brucexu/k8s-dns-node-cache&quot;\n\ndnsautoscaler_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com/brucexu/cluster-proportional-autoscaler-{{ image_arch }}&quot;\ntest_image_repo: docker.io/busybox\nbusybox_image_repo: docker.io/busybox\nhelm_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com/brucexu/k8s-helm&quot;\ntiller_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com/brucexu/tiller&quot;\n\nregistry_image_repo: &quot;docker.io/registry&quot;\nregistry_proxy_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com/brucexu/kube-registry-proxy&quot;\nmetrics_server_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com/brucexu/metrics-server-amd64&quot;\nlocal_volume_provisioner_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com/brucexu/local-volume-provisioner&quot;\ncephfs_provisioner_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com/brucexu/cephfs-provisioner&quot;\nrbd_provisioner_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com/brucexu/rbd-provisioner&quot;\nlocal_path_provisioner_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com/brucexu/local-path-provisioner&quot;\ningress_nginx_controller_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com/brucexu/nginx-ingress-controller&quot;\ncert_manager_controller_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com/brucexu/cert-manager-controller&quot;\naddon_resizer_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com/brucexu/addon-resizer&quot;\n\ndashboard_image_repo: &quot;registry.cn-hangzhou.aliyuncs.com/brucexu/kubernetes-dashboard-amd64&quot;\n\n\nhelm_stable_repo_url: &quot;https://aliacs-app-catalog.oss-cn-hangzhou.aliyuncs.com/charts/&quot;\n</code></pre>\n<h4 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h4><p>使用ansible playbook部署kubespray</p>\n<pre><code class=\"bash\">ansible-playbook -i inventory/mycluster/inventory.ini --become --become-user=root cluster.yml\n</code></pre>\n<blockquote>\n<p>TIPS:<br>kubespray调用kubeadm初始化master节点可能或比较漫长，打开<code>roles/kubernetes/master/tasks/kubeadm-setup.yml</code>可以看到:</p>\n<pre><code class=\"bash\">- name: kubeadm | Initialize first master\n  command: &gt;-\n    timeout -k 600s 600s\n</code></pre>\n<p>可以根据自己的需求修改timeout</p>\n</blockquote>\n<p>等待大概20分钟左右，Kubernetes集群即可安装完成</p>\n<h4 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h4><pre><code class=\"bash\">kubectl get nodes\n</code></pre>\n<p>正常应该看到:</p>\n<pre><code class=\"bash\">NAME         STATUS   ROLES    AGE   VERSION\nha-k8s-001   Ready    master   8m31s   v1.14.3\nha-k8s-002   Ready    master   7m26s   v1.14.3\nha-k8s-003   Ready    master   6m59s   v1.14.3\n</code></pre>\n<p>然后就可以快乐的享用了^_^</p>\n<h3 id=\"访问Kubernetes-Dashboard\"><a href=\"#访问Kubernetes-Dashboard\" class=\"headerlink\" title=\"访问Kubernetes Dashboard\"></a>访问Kubernetes Dashboard</h3><p>可以参考以下方案：</p>\n<ol>\n<li><a href=\"https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/#accessing-the-dashboard-ui\" target=\"_blank\" rel=\"noopener\">https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/#accessing-the-dashboard-ui</a></li>\n<li><a href=\"https://k8s-deploy.mzhpan.cn/09-2.dashboard%E6%8F%92%E4%BB%B6.html#%E8%AE%BF%E9%97%AE-dashboard\" target=\"_blank\" rel=\"noopener\">https://k8s-deploy.mzhpan.cn/09-2.dashboard%E6%8F%92%E4%BB%B6.html#%E8%AE%BF%E9%97%AE-dashboard</a></li>\n</ol>\n<blockquote>\n<p><strong>参考:</strong></p>\n<p><em><a href=\"https://kubernetes.io/docs/setup/production-environment/tools/kubespray/\" target=\"_blank\" rel=\"noopener\">生产环境工具kubespray</a></em></p>\n<p><em><a href=\"https://kubespray.io/#/?id=quick-start\" target=\"_blank\" rel=\"noopener\">Kubespray 快速开始</a></em></p>\n</blockquote>\n"},{"layout":"post","title":"Docker网络踩坑笔记(1)","date":"2019-05-24T10:28:43.000Z","_content":"\n最近想使用k8s管理微服务集群，由于是从单纯的Docker移植，加上对于k8s也是新手难免遇到了各种问题，好在都一一克服了。经历过就了解了，记录一下。\n\nLinux [iptables](https://wiki.archlinux.org/index.php/Iptables_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)) 是一个配置 Linux 内核 防火墙 的命令行工具(用于ipv4)，是 `netfilter` 项目的一部分。\nDocker 容器(containers) 及 服务(services)如此强大的原因之一是它们相互之间可以互联或者连接到非Docker负载。在Linux上Docker通过操作的iptables规则来实现这种复杂的容器网络。\n\n默认 docker continer 的网络是走的 nat. 一般选择的是 172.17.0.0/16 段，大部分情况下这个内网网段未使用. 启动 docker 时会在宿主机的 nat表 和 filter表 自动添加一些规则.\n在某台服务器上运行:\n```bash\niptables -t nat -L -nv\n```\n一般可以看到:\n```bash\nChain PREROUTING (policy ACCEPT 244K packets, 15M bytes)\n pkts bytes target     prot opt in     out     source               destination         \n 287K   17M DOCKER     all  --  *      *       0.0.0.0/0            0.0.0.0/0            ADDRTYPE match dst-type LOCAL\n\nChain INPUT (policy ACCEPT 244K packets, 15M bytes)\n pkts bytes target     prot opt in     out     source               destination         \n\nChain OUTPUT (policy ACCEPT 230K packets, 14M bytes)\n pkts bytes target     prot opt in     out     source               destination         \n    0     0 DOCKER     all  --  *      *       0.0.0.0/0           !127.0.0.0/8          ADDRTYPE match dst-type LOCAL\n\nChain POSTROUTING (policy ACCEPT 231K packets, 14M bytes)\n pkts bytes target     prot opt in     out     source               destination         \n 1656 89798 MASQUERADE  all  --  *      !br-96a729b6b174  172.19.0.0/16        0.0.0.0/0           \n    0     0 MASQUERADE  all  --  *      !docker0  172.18.0.0/16        0.0.0.0/0           \n    0     0 MASQUERADE  all  --  *      !br-2752d520c67d  172.21.0.0/16        0.0.0.0/0           \n    0     0 MASQUERADE  all  --  *      !br-08d32297f556  172.20.0.0/16        0.0.0.0/0           \n    0     0 MASQUERADE  all  --  *      !br-df07ce3e6f03  172.22.0.0/16        0.0.0.0/0           \n    0     0 MASQUERADE  all  --  *      !br-6052a0c8ee6f  172.24.0.0/16        0.0.0.0/0           \n    0     0 MASQUERADE  all  --  *      !br-3e981750d170  172.23.0.0/16        0.0.0.0/0           \n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.2           172.19.0.2           tcp dpt:443\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.2           172.19.0.2           tcp dpt:80\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.2           172.19.0.2           tcp dpt:22\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.4           172.19.0.4           tcp dpt:3000\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.6           172.19.0.6           tcp dpt:6379\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.7           172.19.0.7           tcp dpt:8082\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.8           172.19.0.8           tcp dpt:3001\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.9           172.19.0.9           tcp dpt:80\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.10          172.19.0.10          tcp dpt:639\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.10          172.19.0.10          tcp dpt:389\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.11          172.19.0.11          tcp dpt:80\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.15          172.19.0.15          tcp dpt:443\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.15          172.19.0.15          tcp dpt:80\n\nChain DOCKER (2 references)\n pkts bytes target     prot opt in     out     source               destination         \n    0     0 RETURN     all  --  br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0           \n    0     0 RETURN     all  --  docker0 *       0.0.0.0/0            0.0.0.0/0           \n    0     0 RETURN     all  --  br-2752d520c67d *       0.0.0.0/0            0.0.0.0/0           \n    0     0 RETURN     all  --  br-08d32297f556 *       0.0.0.0/0            0.0.0.0/0           \n    0     0 RETURN     all  --  br-df07ce3e6f03 *       0.0.0.0/0            0.0.0.0/0           \n    0     0 RETURN     all  --  br-6052a0c8ee6f *       0.0.0.0/0            0.0.0.0/0           \n    0     0 RETURN     all  --  br-3e981750d170 *       0.0.0.0/0            0.0.0.0/0           \n    0     0 DNAT       tcp  --  !br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:20443 to:172.19.0.2:443\n    0     0 DNAT       tcp  --  !br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:20080 to:172.19.0.2:80\n   68  2924 DNAT       tcp  --  !br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:23 to:172.19.0.2:22\n    0     0 DNAT       tcp  --  !br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:3002 to:172.19.0.4:3000\n    2   100 DNAT       tcp  --  !br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:6379 to:172.19.0.6:6379\n    0     0 DNAT       tcp  --  !br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:8081 to:172.19.0.7:8082\n    0     0 DNAT       tcp  --  !br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:3001 to:172.19.0.8:3001\n   11   624 DNAT       tcp  --  !br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:8088 to:172.19.0.9:80\n    1    40 DNAT       tcp  --  !br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:639 to:172.19.0.10:639\n    0     0 DNAT       tcp  --  !br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:389 to:172.19.0.10:389\n    4   200 DNAT       tcp  --  !br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:8080 to:172.19.0.11:80\n   12   652 DNAT       tcp  --  !br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:443 to:172.19.0.15:443\n   13   688 DNAT       tcp  --  !br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:80 to:172.19.0.15:80\n```\n这种默认的网络配置可以让用户无需关心docker网络.但是手动修改`iptables`规则时最好先用`iptables-save`备份,已防意外时可以快速使用`iptables-restore`恢复。\n\n在宿主机上使用 ip addr 可以看到网络:\n```bash\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000\n    link/ether 00:16:3e:0e:58:74 brd ff:ff:ff:ff:ff:ff\n    inet 172.17.253.62/20 brd 172.17.255.255 scope global dynamic eth0\n       valid_lft 311968443sec preferred_lft 311968443sec\n3: docker0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default \n    link/ether 02:42:4e:6f:a4:00 brd ff:ff:ff:ff:ff:ff\n    inet 172.18.0.1/16 brd 172.18.255.255 scope global docker0\n       valid_lft forever preferred_lft forever\n3094: vethd17ce7f@if3093: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue master br-96a729b6b174 state UP group default \n    link/ether 2e:50:e7:1a:2f:5f brd ff:ff:ff:ff:ff:ff link-netnsid 8\n3096: veth4cc5908@if3095: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue master br-96a729b6b174 state UP group default \n    link/ether 6e:b0:7b:c1:80:4f brd ff:ff:ff:ff:ff:ff link-netnsid 9\n\n# 省略n行...\n```\ndocker0是docker启动时在宿主机上创建的虚拟网络接口, 用来管理docker container的网络.\nDocker 默认指定了 docker0 接口 的 IP 地址和子网掩码，让主机和容器之间可以通过网桥相互通信，它还给出了 MTU（接口允许接收的最大传输单元），通常是 1500 Bytes，或宿主主机网络路由上支持的默认值。这些值都可以在服务启动的时候进行配置.\n- --bip=CIDR IP 地址加掩码格式，例如 192.168.1.5/24\n- --mtu=BYTES 覆盖默认的 Docker mtu 配置\n也可以在配置文件中配置 DOCKER_OPTS，然后重启服务。\n\n由于当前 Docker 网桥是 Linux 网桥，使用 brctl show 来查看网桥和端口连接信息:\n```bash\nbr-96a729b6b174         8000.0242129f14c0       no              veth3322438\n                                                        veth4a5374d\n                                                        veth4cc5908\n                                                        veth5a6b910\n                                                        veth66dae97\n                                                        veth730d923\n                                                        veth80c057a\n                                                        vetha504b9c\n                                                        vetha6e133c\n                                                        vethb538581\n                                                        vethb88ed80\n                                                        vethcd6dfdd\n                                                        vethd17ce7f\n                                                        vethfcd565c\ndocker0         8000.02424e6fa400       no\n```\n每次创建一个新容器的时候，Docker 从可用的地址段中选择一个空闲的 IP 地址分配给容器的 eth0 端口。使用本地主机上 `docker0` 接口的 IP 作为所有容器的默认网关。\n\n### 使用docker network管理网络\n当`iptables`手动修改错误时,可能在重启某个container时出现如下:\n```bash\n03:49.547056143+08:00\" level=warning msg=\"Failed to allocate and map \nport 20443-20443:  (iptables failed: iptables --wait -t nat -A DOCKER\n-p tcp -d 0/0 --dport 20443 -j DNAT --to-destination 172.19.0.5:443 ! -i br-330809f39e04: \niptables: No chain/--wait -t\n```\n一般情况是该容器在主机上的`iptables`规则被修改或删除了.\n使用`docker network ls` 和 `docker inspect ${container_id}`确定容器所在的网络。\n运行:`docker network connect ${container_id} ${network_name}`重新更新容器网络配置,iptables规则重新生成.\n\n参考:\n- [Docker Network](https://docs.docker.com/network/)","source":"_posts/Docker网络踩坑笔记-1.md","raw":"---\nlayout: post\ntitle: Docker网络踩坑笔记(1)\ndate: 2019-05-24 18:28:43\ntags:\n  - Docker\n  - Kubernetes\n---\n\n最近想使用k8s管理微服务集群，由于是从单纯的Docker移植，加上对于k8s也是新手难免遇到了各种问题，好在都一一克服了。经历过就了解了，记录一下。\n\nLinux [iptables](https://wiki.archlinux.org/index.php/Iptables_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)) 是一个配置 Linux 内核 防火墙 的命令行工具(用于ipv4)，是 `netfilter` 项目的一部分。\nDocker 容器(containers) 及 服务(services)如此强大的原因之一是它们相互之间可以互联或者连接到非Docker负载。在Linux上Docker通过操作的iptables规则来实现这种复杂的容器网络。\n\n默认 docker continer 的网络是走的 nat. 一般选择的是 172.17.0.0/16 段，大部分情况下这个内网网段未使用. 启动 docker 时会在宿主机的 nat表 和 filter表 自动添加一些规则.\n在某台服务器上运行:\n```bash\niptables -t nat -L -nv\n```\n一般可以看到:\n```bash\nChain PREROUTING (policy ACCEPT 244K packets, 15M bytes)\n pkts bytes target     prot opt in     out     source               destination         \n 287K   17M DOCKER     all  --  *      *       0.0.0.0/0            0.0.0.0/0            ADDRTYPE match dst-type LOCAL\n\nChain INPUT (policy ACCEPT 244K packets, 15M bytes)\n pkts bytes target     prot opt in     out     source               destination         \n\nChain OUTPUT (policy ACCEPT 230K packets, 14M bytes)\n pkts bytes target     prot opt in     out     source               destination         \n    0     0 DOCKER     all  --  *      *       0.0.0.0/0           !127.0.0.0/8          ADDRTYPE match dst-type LOCAL\n\nChain POSTROUTING (policy ACCEPT 231K packets, 14M bytes)\n pkts bytes target     prot opt in     out     source               destination         \n 1656 89798 MASQUERADE  all  --  *      !br-96a729b6b174  172.19.0.0/16        0.0.0.0/0           \n    0     0 MASQUERADE  all  --  *      !docker0  172.18.0.0/16        0.0.0.0/0           \n    0     0 MASQUERADE  all  --  *      !br-2752d520c67d  172.21.0.0/16        0.0.0.0/0           \n    0     0 MASQUERADE  all  --  *      !br-08d32297f556  172.20.0.0/16        0.0.0.0/0           \n    0     0 MASQUERADE  all  --  *      !br-df07ce3e6f03  172.22.0.0/16        0.0.0.0/0           \n    0     0 MASQUERADE  all  --  *      !br-6052a0c8ee6f  172.24.0.0/16        0.0.0.0/0           \n    0     0 MASQUERADE  all  --  *      !br-3e981750d170  172.23.0.0/16        0.0.0.0/0           \n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.2           172.19.0.2           tcp dpt:443\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.2           172.19.0.2           tcp dpt:80\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.2           172.19.0.2           tcp dpt:22\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.4           172.19.0.4           tcp dpt:3000\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.6           172.19.0.6           tcp dpt:6379\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.7           172.19.0.7           tcp dpt:8082\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.8           172.19.0.8           tcp dpt:3001\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.9           172.19.0.9           tcp dpt:80\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.10          172.19.0.10          tcp dpt:639\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.10          172.19.0.10          tcp dpt:389\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.11          172.19.0.11          tcp dpt:80\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.15          172.19.0.15          tcp dpt:443\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.15          172.19.0.15          tcp dpt:80\n\nChain DOCKER (2 references)\n pkts bytes target     prot opt in     out     source               destination         \n    0     0 RETURN     all  --  br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0           \n    0     0 RETURN     all  --  docker0 *       0.0.0.0/0            0.0.0.0/0           \n    0     0 RETURN     all  --  br-2752d520c67d *       0.0.0.0/0            0.0.0.0/0           \n    0     0 RETURN     all  --  br-08d32297f556 *       0.0.0.0/0            0.0.0.0/0           \n    0     0 RETURN     all  --  br-df07ce3e6f03 *       0.0.0.0/0            0.0.0.0/0           \n    0     0 RETURN     all  --  br-6052a0c8ee6f *       0.0.0.0/0            0.0.0.0/0           \n    0     0 RETURN     all  --  br-3e981750d170 *       0.0.0.0/0            0.0.0.0/0           \n    0     0 DNAT       tcp  --  !br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:20443 to:172.19.0.2:443\n    0     0 DNAT       tcp  --  !br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:20080 to:172.19.0.2:80\n   68  2924 DNAT       tcp  --  !br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:23 to:172.19.0.2:22\n    0     0 DNAT       tcp  --  !br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:3002 to:172.19.0.4:3000\n    2   100 DNAT       tcp  --  !br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:6379 to:172.19.0.6:6379\n    0     0 DNAT       tcp  --  !br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:8081 to:172.19.0.7:8082\n    0     0 DNAT       tcp  --  !br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:3001 to:172.19.0.8:3001\n   11   624 DNAT       tcp  --  !br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:8088 to:172.19.0.9:80\n    1    40 DNAT       tcp  --  !br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:639 to:172.19.0.10:639\n    0     0 DNAT       tcp  --  !br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:389 to:172.19.0.10:389\n    4   200 DNAT       tcp  --  !br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:8080 to:172.19.0.11:80\n   12   652 DNAT       tcp  --  !br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:443 to:172.19.0.15:443\n   13   688 DNAT       tcp  --  !br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:80 to:172.19.0.15:80\n```\n这种默认的网络配置可以让用户无需关心docker网络.但是手动修改`iptables`规则时最好先用`iptables-save`备份,已防意外时可以快速使用`iptables-restore`恢复。\n\n在宿主机上使用 ip addr 可以看到网络:\n```bash\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000\n    link/ether 00:16:3e:0e:58:74 brd ff:ff:ff:ff:ff:ff\n    inet 172.17.253.62/20 brd 172.17.255.255 scope global dynamic eth0\n       valid_lft 311968443sec preferred_lft 311968443sec\n3: docker0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default \n    link/ether 02:42:4e:6f:a4:00 brd ff:ff:ff:ff:ff:ff\n    inet 172.18.0.1/16 brd 172.18.255.255 scope global docker0\n       valid_lft forever preferred_lft forever\n3094: vethd17ce7f@if3093: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue master br-96a729b6b174 state UP group default \n    link/ether 2e:50:e7:1a:2f:5f brd ff:ff:ff:ff:ff:ff link-netnsid 8\n3096: veth4cc5908@if3095: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue master br-96a729b6b174 state UP group default \n    link/ether 6e:b0:7b:c1:80:4f brd ff:ff:ff:ff:ff:ff link-netnsid 9\n\n# 省略n行...\n```\ndocker0是docker启动时在宿主机上创建的虚拟网络接口, 用来管理docker container的网络.\nDocker 默认指定了 docker0 接口 的 IP 地址和子网掩码，让主机和容器之间可以通过网桥相互通信，它还给出了 MTU（接口允许接收的最大传输单元），通常是 1500 Bytes，或宿主主机网络路由上支持的默认值。这些值都可以在服务启动的时候进行配置.\n- --bip=CIDR IP 地址加掩码格式，例如 192.168.1.5/24\n- --mtu=BYTES 覆盖默认的 Docker mtu 配置\n也可以在配置文件中配置 DOCKER_OPTS，然后重启服务。\n\n由于当前 Docker 网桥是 Linux 网桥，使用 brctl show 来查看网桥和端口连接信息:\n```bash\nbr-96a729b6b174         8000.0242129f14c0       no              veth3322438\n                                                        veth4a5374d\n                                                        veth4cc5908\n                                                        veth5a6b910\n                                                        veth66dae97\n                                                        veth730d923\n                                                        veth80c057a\n                                                        vetha504b9c\n                                                        vetha6e133c\n                                                        vethb538581\n                                                        vethb88ed80\n                                                        vethcd6dfdd\n                                                        vethd17ce7f\n                                                        vethfcd565c\ndocker0         8000.02424e6fa400       no\n```\n每次创建一个新容器的时候，Docker 从可用的地址段中选择一个空闲的 IP 地址分配给容器的 eth0 端口。使用本地主机上 `docker0` 接口的 IP 作为所有容器的默认网关。\n\n### 使用docker network管理网络\n当`iptables`手动修改错误时,可能在重启某个container时出现如下:\n```bash\n03:49.547056143+08:00\" level=warning msg=\"Failed to allocate and map \nport 20443-20443:  (iptables failed: iptables --wait -t nat -A DOCKER\n-p tcp -d 0/0 --dport 20443 -j DNAT --to-destination 172.19.0.5:443 ! -i br-330809f39e04: \niptables: No chain/--wait -t\n```\n一般情况是该容器在主机上的`iptables`规则被修改或删除了.\n使用`docker network ls` 和 `docker inspect ${container_id}`确定容器所在的网络。\n运行:`docker network connect ${container_id} ${network_name}`重新更新容器网络配置,iptables规则重新生成.\n\n参考:\n- [Docker Network](https://docs.docker.com/network/)","slug":"Docker网络踩坑笔记-1","published":1,"updated":"2019-05-24T11:51:55.352Z","comments":1,"photos":[],"link":"","_id":"cjxbmj0se000sekmhdniv5ydv","content":"<p>最近想使用k8s管理微服务集群，由于是从单纯的Docker移植，加上对于k8s也是新手难免遇到了各种问题，好在都一一克服了。经历过就了解了，记录一下。</p>\n<p>Linux <a href=\"https://wiki.archlinux.org/index.php/Iptables_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87\" target=\"_blank\" rel=\"noopener\">iptables</a>) 是一个配置 Linux 内核 防火墙 的命令行工具(用于ipv4)，是 <code>netfilter</code> 项目的一部分。<br>Docker 容器(containers) 及 服务(services)如此强大的原因之一是它们相互之间可以互联或者连接到非Docker负载。在Linux上Docker通过操作的iptables规则来实现这种复杂的容器网络。</p>\n<p>默认 docker continer 的网络是走的 nat. 一般选择的是 172.17.0.0/16 段，大部分情况下这个内网网段未使用. 启动 docker 时会在宿主机的 nat表 和 filter表 自动添加一些规则.<br>在某台服务器上运行:</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">iptables -t nat -L -nv\n</code></pre>\n<p>一般可以看到:</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">Chain PREROUTING <span class=\"token punctuation\">(</span>policy ACCEPT 244K packets, 15M bytes<span class=\"token punctuation\">)</span>\n pkts bytes target     prot opt <span class=\"token keyword\">in</span>     out     <span class=\"token function\">source</span>               destination         \n 287K   17M DOCKER     all  --  *      *       0.0.0.0/0            0.0.0.0/0            ADDRTYPE match dst-type LOCAL\n\nChain INPUT <span class=\"token punctuation\">(</span>policy ACCEPT 244K packets, 15M bytes<span class=\"token punctuation\">)</span>\n pkts bytes target     prot opt <span class=\"token keyword\">in</span>     out     <span class=\"token function\">source</span>               destination         \n\nChain OUTPUT <span class=\"token punctuation\">(</span>policy ACCEPT 230K packets, 14M bytes<span class=\"token punctuation\">)</span>\n pkts bytes target     prot opt <span class=\"token keyword\">in</span>     out     <span class=\"token function\">source</span>               destination         \n    0     0 DOCKER     all  --  *      *       0.0.0.0/0           <span class=\"token operator\">!</span>127.0.0.0/8          ADDRTYPE match dst-type LOCAL\n\nChain POSTROUTING <span class=\"token punctuation\">(</span>policy ACCEPT 231K packets, 14M bytes<span class=\"token punctuation\">)</span>\n pkts bytes target     prot opt <span class=\"token keyword\">in</span>     out     <span class=\"token function\">source</span>               destination         \n 1656 89798 MASQUERADE  all  --  *      <span class=\"token operator\">!</span>br-96a729b6b174  172.19.0.0/16        0.0.0.0/0           \n    0     0 MASQUERADE  all  --  *      <span class=\"token operator\">!</span>docker0  172.18.0.0/16        0.0.0.0/0           \n    0     0 MASQUERADE  all  --  *      <span class=\"token operator\">!</span>br-2752d520c67d  172.21.0.0/16        0.0.0.0/0           \n    0     0 MASQUERADE  all  --  *      <span class=\"token operator\">!</span>br-08d32297f556  172.20.0.0/16        0.0.0.0/0           \n    0     0 MASQUERADE  all  --  *      <span class=\"token operator\">!</span>br-df07ce3e6f03  172.22.0.0/16        0.0.0.0/0           \n    0     0 MASQUERADE  all  --  *      <span class=\"token operator\">!</span>br-6052a0c8ee6f  172.24.0.0/16        0.0.0.0/0           \n    0     0 MASQUERADE  all  --  *      <span class=\"token operator\">!</span>br-3e981750d170  172.23.0.0/16        0.0.0.0/0           \n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.2           172.19.0.2           tcp dpt:443\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.2           172.19.0.2           tcp dpt:80\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.2           172.19.0.2           tcp dpt:22\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.4           172.19.0.4           tcp dpt:3000\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.6           172.19.0.6           tcp dpt:6379\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.7           172.19.0.7           tcp dpt:8082\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.8           172.19.0.8           tcp dpt:3001\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.9           172.19.0.9           tcp dpt:80\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.10          172.19.0.10          tcp dpt:639\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.10          172.19.0.10          tcp dpt:389\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.11          172.19.0.11          tcp dpt:80\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.15          172.19.0.15          tcp dpt:443\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.15          172.19.0.15          tcp dpt:80\n\nChain DOCKER <span class=\"token punctuation\">(</span>2 references<span class=\"token punctuation\">)</span>\n pkts bytes target     prot opt <span class=\"token keyword\">in</span>     out     <span class=\"token function\">source</span>               destination         \n    0     0 RETURN     all  --  br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0           \n    0     0 RETURN     all  --  docker0 *       0.0.0.0/0            0.0.0.0/0           \n    0     0 RETURN     all  --  br-2752d520c67d *       0.0.0.0/0            0.0.0.0/0           \n    0     0 RETURN     all  --  br-08d32297f556 *       0.0.0.0/0            0.0.0.0/0           \n    0     0 RETURN     all  --  br-df07ce3e6f03 *       0.0.0.0/0            0.0.0.0/0           \n    0     0 RETURN     all  --  br-6052a0c8ee6f *       0.0.0.0/0            0.0.0.0/0           \n    0     0 RETURN     all  --  br-3e981750d170 *       0.0.0.0/0            0.0.0.0/0           \n    0     0 DNAT       tcp  --  <span class=\"token operator\">!</span>br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:20443 to:172.19.0.2:443\n    0     0 DNAT       tcp  --  <span class=\"token operator\">!</span>br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:20080 to:172.19.0.2:80\n   68  2924 DNAT       tcp  --  <span class=\"token operator\">!</span>br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:23 to:172.19.0.2:22\n    0     0 DNAT       tcp  --  <span class=\"token operator\">!</span>br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:3002 to:172.19.0.4:3000\n    2   100 DNAT       tcp  --  <span class=\"token operator\">!</span>br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:6379 to:172.19.0.6:6379\n    0     0 DNAT       tcp  --  <span class=\"token operator\">!</span>br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:8081 to:172.19.0.7:8082\n    0     0 DNAT       tcp  --  <span class=\"token operator\">!</span>br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:3001 to:172.19.0.8:3001\n   11   624 DNAT       tcp  --  <span class=\"token operator\">!</span>br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:8088 to:172.19.0.9:80\n    1    40 DNAT       tcp  --  <span class=\"token operator\">!</span>br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:639 to:172.19.0.10:639\n    0     0 DNAT       tcp  --  <span class=\"token operator\">!</span>br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:389 to:172.19.0.10:389\n    4   200 DNAT       tcp  --  <span class=\"token operator\">!</span>br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:8080 to:172.19.0.11:80\n   12   652 DNAT       tcp  --  <span class=\"token operator\">!</span>br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:443 to:172.19.0.15:443\n   13   688 DNAT       tcp  --  <span class=\"token operator\">!</span>br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:80 to:172.19.0.15:80\n</code></pre>\n<p>这种默认的网络配置可以让用户无需关心docker网络.但是手动修改<code>iptables</code>规则时最好先用<code>iptables-save</code>备份,已防意外时可以快速使用<code>iptables-restore</code>恢复。</p>\n<p>在宿主机上使用 ip addr 可以看到网络:</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">1: lo: <span class=\"token operator\">&lt;</span>LOOPBACK,UP,LOWER_UP<span class=\"token operator\">></span> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n2: eth0: <span class=\"token operator\">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class=\"token operator\">></span> mtu 1500 qdisc mq state UP group default qlen 1000\n    link/ether 00:16:3e:0e:58:74 brd ff:ff:ff:ff:ff:ff\n    inet 172.17.253.62/20 brd 172.17.255.255 scope global dynamic eth0\n       valid_lft 311968443sec preferred_lft 311968443sec\n3: docker0: <span class=\"token operator\">&lt;</span>NO-CARRIER,BROADCAST,MULTICAST,UP<span class=\"token operator\">></span> mtu 1500 qdisc noqueue state DOWN group default \n    link/ether 02:42:4e:6f:a4:00 brd ff:ff:ff:ff:ff:ff\n    inet 172.18.0.1/16 brd 172.18.255.255 scope global docker0\n       valid_lft forever preferred_lft forever\n3094: vethd17ce7f@if3093: <span class=\"token operator\">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class=\"token operator\">></span> mtu 1500 qdisc noqueue master br-96a729b6b174 state UP group default \n    link/ether 2e:50:e7:1a:2f:5f brd ff:ff:ff:ff:ff:ff link-netnsid 8\n3096: veth4cc5908@if3095: <span class=\"token operator\">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class=\"token operator\">></span> mtu 1500 qdisc noqueue master br-96a729b6b174 state UP group default \n    link/ether 6e:b0:7b:c1:80:4f brd ff:ff:ff:ff:ff:ff link-netnsid 9\n\n<span class=\"token comment\" spellcheck=\"true\"># 省略n行...</span>\n</code></pre>\n<p>docker0是docker启动时在宿主机上创建的虚拟网络接口, 用来管理docker container的网络.<br>Docker 默认指定了 docker0 接口 的 IP 地址和子网掩码，让主机和容器之间可以通过网桥相互通信，它还给出了 MTU（接口允许接收的最大传输单元），通常是 1500 Bytes，或宿主主机网络路由上支持的默认值。这些值都可以在服务启动的时候进行配置.</p>\n<ul>\n<li>–bip=CIDR IP 地址加掩码格式，例如 192.168.1.5/24</li>\n<li>–mtu=BYTES 覆盖默认的 Docker mtu 配置<br>也可以在配置文件中配置 DOCKER_OPTS，然后重启服务。</li>\n</ul>\n<p>由于当前 Docker 网桥是 Linux 网桥，使用 brctl show 来查看网桥和端口连接信息:</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">br-96a729b6b174         8000.0242129f14c0       no              veth3322438\n                                                        veth4a5374d\n                                                        veth4cc5908\n                                                        veth5a6b910\n                                                        veth66dae97\n                                                        veth730d923\n                                                        veth80c057a\n                                                        vetha504b9c\n                                                        vetha6e133c\n                                                        vethb538581\n                                                        vethb88ed80\n                                                        vethcd6dfdd\n                                                        vethd17ce7f\n                                                        vethfcd565c\ndocker0         8000.02424e6fa400       no\n</code></pre>\n<p>每次创建一个新容器的时候，Docker 从可用的地址段中选择一个空闲的 IP 地址分配给容器的 eth0 端口。使用本地主机上 <code>docker0</code> 接口的 IP 作为所有容器的默认网关。</p>\n<h3 id=\"使用docker-network管理网络\"><a href=\"#使用docker-network管理网络\" class=\"headerlink\" title=\"使用docker network管理网络\"></a>使用docker network管理网络</h3><p>当<code>iptables</code>手动修改错误时,可能在重启某个container时出现如下:</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">03:49.547056143+08:00<span class=\"token string\">\" level=warning msg=\"</span>Failed to allocate and map \nport 20443-20443:  <span class=\"token punctuation\">(</span>iptables failed: iptables --wait -t nat -A DOCKER\n-p tcp -d 0/0 --dport 20443 -j DNAT --to-destination 172.19.0.5:443 <span class=\"token operator\">!</span> -i br-330809f39e04: \niptables: No chain/--wait -t\n</code></pre>\n<p>一般情况是该容器在主机上的<code>iptables</code>规则被修改或删除了.<br>使用<code>docker network ls</code> 和 <code>docker inspect ${container_id}</code>确定容器所在的网络。<br>运行:<code>docker network connect ${container_id} ${network_name}</code>重新更新容器网络配置,iptables规则重新生成.</p>\n<p>参考:</p>\n<ul>\n<li><a href=\"https://docs.docker.com/network/\" target=\"_blank\" rel=\"noopener\">Docker Network</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>最近想使用k8s管理微服务集群，由于是从单纯的Docker移植，加上对于k8s也是新手难免遇到了各种问题，好在都一一克服了。经历过就了解了，记录一下。</p>\n<p>Linux <a href=\"https://wiki.archlinux.org/index.php/Iptables_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87\" target=\"_blank\" rel=\"noopener\">iptables</a>) 是一个配置 Linux 内核 防火墙 的命令行工具(用于ipv4)，是 <code>netfilter</code> 项目的一部分。<br>Docker 容器(containers) 及 服务(services)如此强大的原因之一是它们相互之间可以互联或者连接到非Docker负载。在Linux上Docker通过操作的iptables规则来实现这种复杂的容器网络。</p>\n<p>默认 docker continer 的网络是走的 nat. 一般选择的是 172.17.0.0/16 段，大部分情况下这个内网网段未使用. 启动 docker 时会在宿主机的 nat表 和 filter表 自动添加一些规则.<br>在某台服务器上运行:</p>\n<pre><code class=\"bash\">iptables -t nat -L -nv\n</code></pre>\n<p>一般可以看到:</p>\n<pre><code class=\"bash\">Chain PREROUTING (policy ACCEPT 244K packets, 15M bytes)\n pkts bytes target     prot opt in     out     source               destination         \n 287K   17M DOCKER     all  --  *      *       0.0.0.0/0            0.0.0.0/0            ADDRTYPE match dst-type LOCAL\n\nChain INPUT (policy ACCEPT 244K packets, 15M bytes)\n pkts bytes target     prot opt in     out     source               destination         \n\nChain OUTPUT (policy ACCEPT 230K packets, 14M bytes)\n pkts bytes target     prot opt in     out     source               destination         \n    0     0 DOCKER     all  --  *      *       0.0.0.0/0           !127.0.0.0/8          ADDRTYPE match dst-type LOCAL\n\nChain POSTROUTING (policy ACCEPT 231K packets, 14M bytes)\n pkts bytes target     prot opt in     out     source               destination         \n 1656 89798 MASQUERADE  all  --  *      !br-96a729b6b174  172.19.0.0/16        0.0.0.0/0           \n    0     0 MASQUERADE  all  --  *      !docker0  172.18.0.0/16        0.0.0.0/0           \n    0     0 MASQUERADE  all  --  *      !br-2752d520c67d  172.21.0.0/16        0.0.0.0/0           \n    0     0 MASQUERADE  all  --  *      !br-08d32297f556  172.20.0.0/16        0.0.0.0/0           \n    0     0 MASQUERADE  all  --  *      !br-df07ce3e6f03  172.22.0.0/16        0.0.0.0/0           \n    0     0 MASQUERADE  all  --  *      !br-6052a0c8ee6f  172.24.0.0/16        0.0.0.0/0           \n    0     0 MASQUERADE  all  --  *      !br-3e981750d170  172.23.0.0/16        0.0.0.0/0           \n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.2           172.19.0.2           tcp dpt:443\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.2           172.19.0.2           tcp dpt:80\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.2           172.19.0.2           tcp dpt:22\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.4           172.19.0.4           tcp dpt:3000\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.6           172.19.0.6           tcp dpt:6379\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.7           172.19.0.7           tcp dpt:8082\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.8           172.19.0.8           tcp dpt:3001\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.9           172.19.0.9           tcp dpt:80\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.10          172.19.0.10          tcp dpt:639\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.10          172.19.0.10          tcp dpt:389\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.11          172.19.0.11          tcp dpt:80\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.15          172.19.0.15          tcp dpt:443\n    0     0 MASQUERADE  tcp  --  *      *       172.19.0.15          172.19.0.15          tcp dpt:80\n\nChain DOCKER (2 references)\n pkts bytes target     prot opt in     out     source               destination         \n    0     0 RETURN     all  --  br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0           \n    0     0 RETURN     all  --  docker0 *       0.0.0.0/0            0.0.0.0/0           \n    0     0 RETURN     all  --  br-2752d520c67d *       0.0.0.0/0            0.0.0.0/0           \n    0     0 RETURN     all  --  br-08d32297f556 *       0.0.0.0/0            0.0.0.0/0           \n    0     0 RETURN     all  --  br-df07ce3e6f03 *       0.0.0.0/0            0.0.0.0/0           \n    0     0 RETURN     all  --  br-6052a0c8ee6f *       0.0.0.0/0            0.0.0.0/0           \n    0     0 RETURN     all  --  br-3e981750d170 *       0.0.0.0/0            0.0.0.0/0           \n    0     0 DNAT       tcp  --  !br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:20443 to:172.19.0.2:443\n    0     0 DNAT       tcp  --  !br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:20080 to:172.19.0.2:80\n   68  2924 DNAT       tcp  --  !br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:23 to:172.19.0.2:22\n    0     0 DNAT       tcp  --  !br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:3002 to:172.19.0.4:3000\n    2   100 DNAT       tcp  --  !br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:6379 to:172.19.0.6:6379\n    0     0 DNAT       tcp  --  !br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:8081 to:172.19.0.7:8082\n    0     0 DNAT       tcp  --  !br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:3001 to:172.19.0.8:3001\n   11   624 DNAT       tcp  --  !br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:8088 to:172.19.0.9:80\n    1    40 DNAT       tcp  --  !br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:639 to:172.19.0.10:639\n    0     0 DNAT       tcp  --  !br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:389 to:172.19.0.10:389\n    4   200 DNAT       tcp  --  !br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:8080 to:172.19.0.11:80\n   12   652 DNAT       tcp  --  !br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:443 to:172.19.0.15:443\n   13   688 DNAT       tcp  --  !br-96a729b6b174 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:80 to:172.19.0.15:80\n</code></pre>\n<p>这种默认的网络配置可以让用户无需关心docker网络.但是手动修改<code>iptables</code>规则时最好先用<code>iptables-save</code>备份,已防意外时可以快速使用<code>iptables-restore</code>恢复。</p>\n<p>在宿主机上使用 ip addr 可以看到网络:</p>\n<pre><code class=\"bash\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000\n    link/ether 00:16:3e:0e:58:74 brd ff:ff:ff:ff:ff:ff\n    inet 172.17.253.62/20 brd 172.17.255.255 scope global dynamic eth0\n       valid_lft 311968443sec preferred_lft 311968443sec\n3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default \n    link/ether 02:42:4e:6f:a4:00 brd ff:ff:ff:ff:ff:ff\n    inet 172.18.0.1/16 brd 172.18.255.255 scope global docker0\n       valid_lft forever preferred_lft forever\n3094: vethd17ce7f@if3093: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master br-96a729b6b174 state UP group default \n    link/ether 2e:50:e7:1a:2f:5f brd ff:ff:ff:ff:ff:ff link-netnsid 8\n3096: veth4cc5908@if3095: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master br-96a729b6b174 state UP group default \n    link/ether 6e:b0:7b:c1:80:4f brd ff:ff:ff:ff:ff:ff link-netnsid 9\n\n# 省略n行...\n</code></pre>\n<p>docker0是docker启动时在宿主机上创建的虚拟网络接口, 用来管理docker container的网络.<br>Docker 默认指定了 docker0 接口 的 IP 地址和子网掩码，让主机和容器之间可以通过网桥相互通信，它还给出了 MTU（接口允许接收的最大传输单元），通常是 1500 Bytes，或宿主主机网络路由上支持的默认值。这些值都可以在服务启动的时候进行配置.</p>\n<ul>\n<li>–bip=CIDR IP 地址加掩码格式，例如 192.168.1.5/24</li>\n<li>–mtu=BYTES 覆盖默认的 Docker mtu 配置<br>也可以在配置文件中配置 DOCKER_OPTS，然后重启服务。</li>\n</ul>\n<p>由于当前 Docker 网桥是 Linux 网桥，使用 brctl show 来查看网桥和端口连接信息:</p>\n<pre><code class=\"bash\">br-96a729b6b174         8000.0242129f14c0       no              veth3322438\n                                                        veth4a5374d\n                                                        veth4cc5908\n                                                        veth5a6b910\n                                                        veth66dae97\n                                                        veth730d923\n                                                        veth80c057a\n                                                        vetha504b9c\n                                                        vetha6e133c\n                                                        vethb538581\n                                                        vethb88ed80\n                                                        vethcd6dfdd\n                                                        vethd17ce7f\n                                                        vethfcd565c\ndocker0         8000.02424e6fa400       no\n</code></pre>\n<p>每次创建一个新容器的时候，Docker 从可用的地址段中选择一个空闲的 IP 地址分配给容器的 eth0 端口。使用本地主机上 <code>docker0</code> 接口的 IP 作为所有容器的默认网关。</p>\n<h3 id=\"使用docker-network管理网络\"><a href=\"#使用docker-network管理网络\" class=\"headerlink\" title=\"使用docker network管理网络\"></a>使用docker network管理网络</h3><p>当<code>iptables</code>手动修改错误时,可能在重启某个container时出现如下:</p>\n<pre><code class=\"bash\">03:49.547056143+08:00&quot; level=warning msg=&quot;Failed to allocate and map \nport 20443-20443:  (iptables failed: iptables --wait -t nat -A DOCKER\n-p tcp -d 0/0 --dport 20443 -j DNAT --to-destination 172.19.0.5:443 ! -i br-330809f39e04: \niptables: No chain/--wait -t\n</code></pre>\n<p>一般情况是该容器在主机上的<code>iptables</code>规则被修改或删除了.<br>使用<code>docker network ls</code> 和 <code>docker inspect ${container_id}</code>确定容器所在的网络。<br>运行:<code>docker network connect ${container_id} ${network_name}</code>重新更新容器网络配置,iptables规则重新生成.</p>\n<p>参考:</p>\n<ul>\n<li><a href=\"https://docs.docker.com/network/\" target=\"_blank\" rel=\"noopener\">Docker Network</a></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjxbmj0rv0000ekmhkx4zkpjx","tag_id":"cjxbmj0s10004ekmhs9gqo73a","_id":"cjxbmj0s8000cekmhkrzkg7mj"},{"post_id":"cjxbmj0rv0000ekmhkx4zkpjx","tag_id":"cjxbmj0s50009ekmh24cd75jn","_id":"cjxbmj0s8000dekmh67wo69nv"},{"post_id":"cjxbmj0rz0002ekmh9fsftld4","tag_id":"cjxbmj0s10004ekmhs9gqo73a","_id":"cjxbmj0s8000fekmh0h7q74gv"},{"post_id":"cjxbmj0s20005ekmhqouwky5n","tag_id":"cjxbmj0s8000eekmhmvk9xyge","_id":"cjxbmj0s9000hekmhe2ffp1m4"},{"post_id":"cjxbmj0s40007ekmhbocq7435","tag_id":"cjxbmj0s8000gekmhnmofhu27","_id":"cjxbmj0s9000jekmh5qhhhc4k"},{"post_id":"cjxbmj0s50008ekmhga8uejh1","tag_id":"cjxbmj0s8000eekmhmvk9xyge","_id":"cjxbmj0sa000nekmh2168lj3w"},{"post_id":"cjxbmj0s50008ekmhga8uejh1","tag_id":"cjxbmj0s9000kekmhp88vu2zf","_id":"cjxbmj0sa000oekmhnees2ylx"},{"post_id":"cjxbmj0s50008ekmhga8uejh1","tag_id":"cjxbmj0s9000lekmhc8pzffb9","_id":"cjxbmj0sa000pekmh303cx9y6"},{"post_id":"cjxbmj0s6000aekmhyubxhr9t","tag_id":"cjxbmj0sa000mekmhkbx2cnpl","_id":"cjxbmj0sa000qekmhfe90erhx"},{"post_id":"cjxbmj0sc000rekmhi53oo4qc","tag_id":"cjxbmj0sf000tekmhnq15qpyi","_id":"cjxbmj0sg000vekmhid7mm1jp"},{"post_id":"cjxbmj0se000sekmhdniv5ydv","tag_id":"cjxbmj0sf000uekmhuqn6pu1t","_id":"cjxbmj0sh000xekmh3uq0eun9"},{"post_id":"cjxbmj0se000sekmhdniv5ydv","tag_id":"cjxbmj0sf000tekmhnq15qpyi","_id":"cjxbmj0sh000yekmhnv155rgf"}],"Tag":[{"name":"CentOS","_id":"cjxbmj0s10004ekmhs9gqo73a"},{"name":"代理","_id":"cjxbmj0s50009ekmh24cd75jn"},{"name":"随笔","_id":"cjxbmj0s8000eekmhmvk9xyge"},{"name":"CentOSx","_id":"cjxbmj0s8000gekmhnmofhu27"},{"name":"旅行","_id":"cjxbmj0s9000kekmhp88vu2zf"},{"name":"吐鲁番","_id":"cjxbmj0s9000lekmhc8pzffb9"},{"name":"测试","_id":"cjxbmj0sa000mekmhkbx2cnpl"},{"name":"Kubernetes","_id":"cjxbmj0sf000tekmhnq15qpyi"},{"name":"Docker","_id":"cjxbmj0sf000uekmhuqn6pu1t"}]}}